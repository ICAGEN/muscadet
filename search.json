[{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"sec-mat-counts","dir":"Articles","previous_headings":"","what":"Count matrices","title":"Preparation of input data","text":"mat_counts input required muscadet analysis must provided CreateMuscomicObject(). input matrix (sparse dgCMatrix ) raw read counts features rows cells columns (Table 1). See ?mat_counts full documentation. Table 1: Allele counts table example Seurat/Signac analysis: ArchR/SummarizedExperiment analysis:","code":"data(\"mat_counts_atac_tumor\") kable(mat_counts_atac_tumor[698:700,34:36]) library(Seurat) # Seurat v5 library(Signac)  data(\"atac_small\") # Example Seurat class object from Signac  # dgCMatrix matrix from Assay named \"RNA\" mat_counts_RNA <- atac_small[[\"RNA\"]]$counts  # dgCMatrix matrix from ChromatinAssay named \"peaks\" mat_counts_ATAC <- atac_small[[\"peaks\"]]$counts library(SummarizedExperiment) # RangedSummarizedExperiment class object se <- readRDS(\"<SummarizedExperiment_path>\")  # dgCMatrix matrix mat_counts_ATAC <- assay(se)"},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"sec-allele-counts","dir":"Articles","previous_headings":"","what":"Allele counts tables","title":"Preparation of input data","text":"allele_counts input optional clustering step (allelic information used clustering) required CNA calling step: can provided initial object creation step CreateMuscomicObject() added muscadet objects later addAlleleCounts(). input data frame format containing allelic read counts specific variant positions across cells (Table 2). format follows Variant Calling Format (VCF)-like structure include: cell: unique cell barcode id: variant identifier (e.g. CHROM_POS_REF_ALT) CHROM: chromosome POS: position REF / ALT: reference alternate alleles RD / AD: counts reference alternate alleles DP: total depth GT: genotype (optional) See ?allele_counts full documentation. Table 2: Allele counts table example Variant positions can derived : Matched bulk sequencing identify individual-specific heterozygous SNPs, Reference panels common SNPs (e.g. gnomAD, 1000G). Positions can retrieved running FACETS1 matched WGS/WES normal samples. Use snp-pileup extract allele counts bulk BAM files known sites (VCF common SNPs NCBI database). output snp-pileup can filtered depth allele frequency keep heterozygous positions well covered. See FACETS snp-pileup documentation. gnomAD database (4,099 SNPs): data 1000G database (2,548 SNPs): data SCReadCounts2 used get read counts per allele single cell BAM files. program scReadCounts manages sequential execution programs readCounts readCountsMatrix, collects necessary arguments successful execution, avoids unnecessary execution expensive readCounts tool possible. readCounts requires three input files: pooled single cell alignment, list genomic positions interest, barcodes file (barcodes.tsv) . Optionally, readCounts can user-configured read filtering cell-barcode handling, including restriction barcodes interest (achieved specifying barcodes file - barcodes.tsv). readCounts utilizes barcode information pooled single cell alignments outputs variant reference read counts (nvar nref, respectively), barcode (cell), restricted present barcodes file, tab separated text file. file used input second program - readCountsMatrix - , upon providing output prefix, generates two outputs: (1) cell-position matrix absolute nvar nref counts, (2) cell-position matrix expressed VAFRNA. VAFRNA estimated user-defined threshold minimum required sequencing reads (minR); default minR = 5. readCountsMatrix time-efficient can re-run multiple times various minR thresholds. Together, tools facilitate single-cell level assessment read counts. https://horvathlab.github.io/NGS/SCReadCounts/ desired output tab separated text file variant reference read counts barcode, command readCounts preferred avoid unnecessary large matrix outputs readCountsMatrix. Command usage forreadCounts Details Read grouping Details Alignment filter Example readCounts command, STARsolo_CB read grouping MPileup alignment filter: , output readCounts (table variant reference read counts) can formatted fit muscadet input requirement process_allele() (Table 3, Table 4). Table 3: Example readCounts output Table 4: Formatted table allele counts","code":"data(\"allele_counts_atac_tumor\") kable(head(allele_counts_atac_tumor)) readCounts \\     -s <vcf_file.vcf> \\     -r <bam_file.bam> \\     -b None \\     -G STARsolo_CB \\     -f MPileup \\     -o <output_file.tsv> \\     -t <threads> \\     &> <log_file> # Example data frame of readCounts results readcounts <- data.frame(   CHROM = c(\"1\", \"1\", \"2\"),   POS = c(10101, 20202, 30303),   REF = c(\"A\", \"G\", \"T\"),   ALT = c(\"G\", \"A\", \"C\"),   ReadGroup = c(\"cell1\", \"cell1\", \"cell1\"),   SNVCountForward = c(5, 10, 3),   SNVCountReverse = c(4, 6, 2),   RefCountForward = c(20, 15, 10),   RefCountReverse = c(18, 12, 8) ) readcounts$SNVCount <- readcounts$SNVCountForward + readcounts$SNVCountReverse readcounts$RefCount <- readcounts$RefCountForward +readcounts$RefCountReverse readcounts$GoodReads <- readcounts$SNVCount + readcounts$RefCount readcounts[, \"%BadRead\"] <- c(0, 0, 0) readcounts$VAF <- round(readcounts$SNVCount / readcounts$GoodReads, 4) kable(readcounts) kable(process_allele(readcounts))"},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"variant-positions","dir":"Articles","previous_headings":"","what":"Variant positions","title":"Preparation of input data","text":"Variant positions can derived : Matched bulk sequencing identify individual-specific heterozygous SNPs, Reference panels common SNPs (e.g. gnomAD, 1000G). Positions can retrieved running FACETS1 matched WGS/WES normal samples. Use snp-pileup extract allele counts bulk BAM files known sites (VCF common SNPs NCBI database). output snp-pileup can filtered depth allele frequency keep heterozygous positions well covered. See FACETS snp-pileup documentation. gnomAD database (4,099 SNPs): data 1000G database (2,548 SNPs): data ","code":""},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"individual-specific-heterozygous-positions-from-bulk-data","dir":"Articles","previous_headings":"2 Allele counts tables","what":"Individual-specific heterozygous positions from bulk data","title":"Preparation of input data","text":"Positions can retrieved running FACETS1 matched WGS/WES normal samples. Use snp-pileup extract allele counts bulk BAM files known sites (VCF common SNPs NCBI database). output snp-pileup can filtered depth allele frequency keep heterozygous positions well covered. See FACETS snp-pileup documentation.","code":""},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"panels-of-common-snps","dir":"Articles","previous_headings":"2 Allele counts tables","what":"Panels of common SNPs","title":"Preparation of input data","text":"gnomAD database (4,099 SNPs): data 1000G database (2,548 SNPs): data ","code":""},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"count-reads-from-single-cells","dir":"Articles","previous_headings":"","what":"Count reads from single cells","title":"Preparation of input data","text":"SCReadCounts2 used get read counts per allele single cell BAM files. program scReadCounts manages sequential execution programs readCounts readCountsMatrix, collects necessary arguments successful execution, avoids unnecessary execution expensive readCounts tool possible. readCounts requires three input files: pooled single cell alignment, list genomic positions interest, barcodes file (barcodes.tsv) . Optionally, readCounts can user-configured read filtering cell-barcode handling, including restriction barcodes interest (achieved specifying barcodes file - barcodes.tsv). readCounts utilizes barcode information pooled single cell alignments outputs variant reference read counts (nvar nref, respectively), barcode (cell), restricted present barcodes file, tab separated text file. file used input second program - readCountsMatrix - , upon providing output prefix, generates two outputs: (1) cell-position matrix absolute nvar nref counts, (2) cell-position matrix expressed VAFRNA. VAFRNA estimated user-defined threshold minimum required sequencing reads (minR); default minR = 5. readCountsMatrix time-efficient can re-run multiple times various minR thresholds. Together, tools facilitate single-cell level assessment read counts. https://horvathlab.github.io/NGS/SCReadCounts/ desired output tab separated text file variant reference read counts barcode, command readCounts preferred avoid unnecessary large matrix outputs readCountsMatrix. Command usage forreadCounts Details Read grouping Details Alignment filter Example readCounts command, STARsolo_CB read grouping MPileup alignment filter: , output readCounts (table variant reference read counts) can formatted fit muscadet input requirement process_allele() (Table 3, Table 4). Table 3: Example readCounts output Table 4: Formatted table allele counts","code":"readCounts \\     -s <vcf_file.vcf> \\     -r <bam_file.bam> \\     -b None \\     -G STARsolo_CB \\     -f MPileup \\     -o <output_file.tsv> \\     -t <threads> \\     &> <log_file> # Example data frame of readCounts results readcounts <- data.frame(   CHROM = c(\"1\", \"1\", \"2\"),   POS = c(10101, 20202, 30303),   REF = c(\"A\", \"G\", \"T\"),   ALT = c(\"G\", \"A\", \"C\"),   ReadGroup = c(\"cell1\", \"cell1\", \"cell1\"),   SNVCountForward = c(5, 10, 3),   SNVCountReverse = c(4, 6, 2),   RefCountForward = c(20, 15, 10),   RefCountReverse = c(18, 12, 8) ) readcounts$SNVCount <- readcounts$SNVCountForward + readcounts$SNVCountReverse readcounts$RefCount <- readcounts$RefCountForward +readcounts$RefCountReverse readcounts$GoodReads <- readcounts$SNVCount + readcounts$RefCount readcounts[, \"%BadRead\"] <- c(0, 0, 0) readcounts$VAF <- round(readcounts$SNVCount / readcounts$GoodReads, 4) kable(readcounts) kable(process_allele(readcounts))"},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"sec-features","dir":"Articles","previous_headings":"","what":"Feature coordinates","title":"Preparation of input data","text":"table features coordinates 4 columns (CHROM, start, end, id) matching features count matrices (section Section 1) required (Table 5). See ?features full documentation. Table 5: Features coordinates table example Seurat/Signac ArchR/SummarizedExperiment: Important Cell names (columns) features names (rows) must match assays features coordinates table ids.","code":"data(\"peaks\") kable(head(peaks)) library(Signac) # Example Seurat class object from Signac data(\"atac_small\")  # GRanges class object peaks_coord <- atac_small[[\"peaks\"]]$ranges   peaks_coord <- as.data.frame(peaks_coord)  peaks_coord$id <- paste(peaks_coord$seqnames,                         peaks_coord$start,                         peaks_coord$end,                         sep = \"-\") peaks_coord <- peaks_coord[, c(\"seqnames\", \"start\", \"end\", \"id\")] colnames(peaks_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\") library(SummarizedExperiment) # RangedSummarizedExperiment class object se <- readRDS(\"<SummarizedExperiment_path>\")  # GRanges class object peaks_coord <- rowRanges(se)   peaks_coord <- as.data.frame(peaks_coord) peaks_coord$id <- paste(peaks_coord$seqnames, peaks_coord$start, peaks_coord$end, sep = \"-\") peaks_coord <- peaks_coord[, c(\"seqnames\", \"start\", \"end\", \"id\")] colnames(peaks_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\") # Use your own annotation genes_coord <- read.delim( \"<genes_gtf_file>\") genes_coord <- genes_coord[, c(\"seqnames\", \"start\", \"end\", \"gene_name\")] colnames(genes_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\")  # Or get coordinates  library(EnsDb.Hsapiens.v86) # for human library(AnnotationDbi)  genes <- rownames(mat_counts_RNA) genes_coord <- genes(EnsDb.Hsapiens.v86, filter = GeneNameFilter(genes)) genes_coord <- as.data.frame(genes_coord) genes_coord <- genes_coord[genes_coord$seqnames %in% c(1:22, \"X\", \"Y\"), ] genes_coord <- genes_coord[, c(\"seqnames\", \"start\", \"end\", \"gene_name\")] colnames(genes_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\") rownames(genes_coord) <- NULL # Make sure row names of mat_counts match features ids identical(rownames(mat_counts_ATAC), peaks_coord[, \"id\"]) rownames(mat_counts_ATAC) <- peaks_coord[, \"id\"]  table(rownames(mat_counts_RNA) %in% genes_coord[, \"id\"])  # Cell names format must match between different assays intersect(colnames(mat_counts_ATAC), colnames(mat_counts_RNA))"},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"peaks","dir":"Articles","previous_headings":"","what":"Peaks","title":"Preparation of input data","text":"Seurat/Signac ArchR/SummarizedExperiment:","code":"library(Signac) # Example Seurat class object from Signac data(\"atac_small\")  # GRanges class object peaks_coord <- atac_small[[\"peaks\"]]$ranges   peaks_coord <- as.data.frame(peaks_coord)  peaks_coord$id <- paste(peaks_coord$seqnames,                         peaks_coord$start,                         peaks_coord$end,                         sep = \"-\") peaks_coord <- peaks_coord[, c(\"seqnames\", \"start\", \"end\", \"id\")] colnames(peaks_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\") library(SummarizedExperiment) # RangedSummarizedExperiment class object se <- readRDS(\"<SummarizedExperiment_path>\")  # GRanges class object peaks_coord <- rowRanges(se)   peaks_coord <- as.data.frame(peaks_coord) peaks_coord$id <- paste(peaks_coord$seqnames, peaks_coord$start, peaks_coord$end, sep = \"-\") peaks_coord <- peaks_coord[, c(\"seqnames\", \"start\", \"end\", \"id\")] colnames(peaks_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\")"},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"genes","dir":"Articles","previous_headings":"","what":"Genes","title":"Preparation of input data","text":"","code":"# Use your own annotation genes_coord <- read.delim( \"<genes_gtf_file>\") genes_coord <- genes_coord[, c(\"seqnames\", \"start\", \"end\", \"gene_name\")] colnames(genes_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\")  # Or get coordinates  library(EnsDb.Hsapiens.v86) # for human library(AnnotationDbi)  genes <- rownames(mat_counts_RNA) genes_coord <- genes(EnsDb.Hsapiens.v86, filter = GeneNameFilter(genes)) genes_coord <- as.data.frame(genes_coord) genes_coord <- genes_coord[genes_coord$seqnames %in% c(1:22, \"X\", \"Y\"), ] genes_coord <- genes_coord[, c(\"seqnames\", \"start\", \"end\", \"gene_name\")] colnames(genes_coord) <- c(\"CHROM\", \"start\", \"end\", \"id\") rownames(genes_coord) <- NULL"},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"match-cells-and-features","dir":"Articles","previous_headings":"","what":"Match cells and features","title":"Preparation of input data","text":"Important Cell names (columns) features names (rows) must match assays features coordinates table ids.","code":"# Make sure row names of mat_counts match features ids identical(rownames(mat_counts_ATAC), peaks_coord[, \"id\"]) rownames(mat_counts_ATAC) <- peaks_coord[, \"id\"]  table(rownames(mat_counts_RNA) %in% genes_coord[, \"id\"])  # Cell names format must match between different assays intersect(colnames(mat_counts_ATAC), colnames(mat_counts_RNA))"},{"path":"https://icagen.github.io/muscadet/articles/data-prep.html","id":"bulk-log-ratios","dir":"Articles","previous_headings":"","what":"Bulk log-ratios","title":"Preparation of input data","text":"table log ratios computed matched bulk sequencing (e.g. Whole Genome Sequencing) can optionally provided CreateMuscadetObject() displayed bottom log ratio heatmaps validation purposes (Table 6). Log ratios bulk sequencing can obtained FACETS3 analysis. See ?bulk_lrr full documentation. Table 6: Bulk log ratios table example","code":"data(\"bulk_lrr\") kable(head(bulk_lrr))"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to muscadet","text":"Install latest version directly GitHub.","code":"library(devtools) devtools::install_github(\"ICAGEN/muscadet\")"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"inputs-and-objects-creation","dir":"Articles","previous_headings":"","what":"Inputs and objects creation","title":"Introduction to muscadet","text":"muscomic objects (see ?muscomic) primary objects muscadet analysis, created using CreateMuscomicObject() function following inputs: type: type omic, \"RNA\" \"ATAC\" ones currently supported. Note DNA types omics, \"ATAC\" type can used. mat_counts: raw count matrix (see ?mat_counts). allele_counts: table raw counts per allele (see ?allele_counts) (optional, can added later analysis). features: table features coordinates (see ?features). muscadet objects (see ?muscadet) consists one several muscomic objects, along additional information store downstream analysis results. can created using CreateMuscadetObject() function list muscomic objects input well bulk coverage information (see ?bulk_lrr) genome assembly use. example complete muscadet object demo dataset included package. Create another muscadet object reference cells data. Several method functions available access data within muscadet/muscomic objects.","code":"library(muscadet)  # Load example dataset inputs: # Matrices of raw counts per features data(\"mat_counts_atac_tumor\", \"mat_counts_rna_tumor\") # Table of raw counts per allele data(\"allele_counts_atac_tumor\", \"allele_counts_rna_tumor\") # Table of feature coordinates data(\"peaks\", \"genes\")  # Create individual omic objects atac <- CreateMuscomicObject(     type = \"ATAC\",     mat_counts = mat_counts_atac_tumor,      allele_counts = allele_counts_atac_tumor,      features = peaks) rna <- CreateMuscomicObject(     type = \"RNA\",     mat_counts = mat_counts_rna_tumor,     allele_counts = allele_counts_rna_tumor,     features = genes)  atac #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  mat.counts coverage data matrix  #>  112 cells  #>  1000 features: peaks  #>  691 variant positions  rna #> A muscomic object of type RNA labelled scRNA-seq containing:  #>  mat.counts coverage data matrix  #>  119 cells  #>  500 features: genes  #>  373 variant positions # Table of coverage information (log ratio) from bulk data (i.e. WGS) data(\"bulk_lrr\")  # Create multiomic muscadet object muscadet <- CreateMuscadetObject(     omics = list(ATAC = atac, RNA = rna),     bulk.lrr = bulk_lrr,     bulk.label = \"WGS\",     genome = \"hg38\") muscadet #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: mat.counts, mat.counts  #>  cells: 112, 119 (common: 84, total: 147)  #>  features: 1000, 500  #>  feature labels: peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: WGS  #>  clustering: None  #>  CNA calling: None  #>  genome: hg38 # Example muscadet object data(\"muscadet_obj\") muscadet_obj #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: log.ratio, log.ratio  #>  cells: 112, 119 (common: 84, total: 147)  #>  features: 133, 349  #>  feature labels: windows of peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: WGS  #>  clustering: partitions = 0.6, 0.8, 1 ; optimal partition = 1  #>  CNA calling: 2 clusters ; 47 consensus segments including 1 CNA segments  #>  genome: hg38 data(\"mat_counts_atac_ref\", \"mat_counts_rna_ref\") data(\"allele_counts_atac_ref\", \"allele_counts_rna_ref\")  atac_ref <- CreateMuscomicObject(     type = \"ATAC\",     mat_counts = mat_counts_atac_ref,     allele_counts = allele_counts_atac_ref,     features = peaks) rna_ref <- CreateMuscomicObject(     type = \"RNA\",     mat_counts = mat_counts_rna_ref,     allele_counts = allele_counts_rna_ref,     features = genes) muscadet_ref <- CreateMuscadetObject(     omics = list(ATAC = atac_ref, RNA = rna_ref),     genome = \"hg38\") muscadet_ref #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: mat.counts, mat.counts  #>  cells: 99, 97 (common: 78, total: 118)  #>  features: 1000, 500  #>  feature labels: peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: None  #>  clustering: None  #>  CNA calling: None  #>  genome: hg38 library(SeuratObject) # Cells() and Features() methods imported from SeuratObject  # Cell names Cells(muscadet_obj) # list of cells, one element per omic Cells(muscadet_obj)$ATAC # element of the list Cells(muscadet_obj$ATAC) # cells for muscomic object Reduce(union, Cells(muscadet_obj)) # all cells Reduce(intersect, Cells(muscadet_obj)) # common cells  # Feature names Features(muscadet_obj) # list, one element per omic Features(muscadet_obj)$ATAC  # Matrix of raw counts matCounts(muscadet_obj) # list, one element per omic matCounts(muscadet_obj$ATAC)  # Matrix of log ratios matLogRatio(muscadet_obj) # list, one element per omic matLogRatio(muscadet_obj)$ATAC  # Table of feature coordinates coordFeatures(muscadet_obj) # list, one element per omic coordFeatures(muscadet_obj)$RNA library(SeuratObject) # Cells() and Features() methods imported from SeuratObject  # number of cells in total length(Reduce(union, Cells(muscadet_obj))) #> [1] 147 # number of common cells length(Reduce(intersect, Cells(muscadet_obj))) #> [1] 84 # number of cells per omic lapply(Cells(muscadet_obj), length) #> $ATAC #> [1] 112 #>  #> $RNA #> [1] 119 # number of features per omic lapply(Features(muscadet_obj), length) #> $ATAC #> [1] 133 #>  #> $RNA #> [1] 349"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"muscomic","dir":"Articles","previous_headings":"","what":"muscomic","title":"Introduction to muscadet","text":"muscomic objects (see ?muscomic) primary objects muscadet analysis, created using CreateMuscomicObject() function following inputs: type: type omic, \"RNA\" \"ATAC\" ones currently supported. Note DNA types omics, \"ATAC\" type can used. mat_counts: raw count matrix (see ?mat_counts). allele_counts: table raw counts per allele (see ?allele_counts) (optional, can added later analysis). features: table features coordinates (see ?features).","code":"library(muscadet)  # Load example dataset inputs: # Matrices of raw counts per features data(\"mat_counts_atac_tumor\", \"mat_counts_rna_tumor\") # Table of raw counts per allele data(\"allele_counts_atac_tumor\", \"allele_counts_rna_tumor\") # Table of feature coordinates data(\"peaks\", \"genes\")  # Create individual omic objects atac <- CreateMuscomicObject(     type = \"ATAC\",     mat_counts = mat_counts_atac_tumor,      allele_counts = allele_counts_atac_tumor,      features = peaks) rna <- CreateMuscomicObject(     type = \"RNA\",     mat_counts = mat_counts_rna_tumor,     allele_counts = allele_counts_rna_tumor,     features = genes)  atac #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  mat.counts coverage data matrix  #>  112 cells  #>  1000 features: peaks  #>  691 variant positions  rna #> A muscomic object of type RNA labelled scRNA-seq containing:  #>  mat.counts coverage data matrix  #>  119 cells  #>  500 features: genes  #>  373 variant positions"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"muscadet","dir":"Articles","previous_headings":"","what":"muscadet","title":"Introduction to muscadet","text":"muscadet objects (see ?muscadet) consists one several muscomic objects, along additional information store downstream analysis results. can created using CreateMuscadetObject() function list muscomic objects input well bulk coverage information (see ?bulk_lrr) genome assembly use. example complete muscadet object demo dataset included package. Create another muscadet object reference cells data.","code":"# Table of coverage information (log ratio) from bulk data (i.e. WGS) data(\"bulk_lrr\")  # Create multiomic muscadet object muscadet <- CreateMuscadetObject(     omics = list(ATAC = atac, RNA = rna),     bulk.lrr = bulk_lrr,     bulk.label = \"WGS\",     genome = \"hg38\") muscadet #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: mat.counts, mat.counts  #>  cells: 112, 119 (common: 84, total: 147)  #>  features: 1000, 500  #>  feature labels: peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: WGS  #>  clustering: None  #>  CNA calling: None  #>  genome: hg38 # Example muscadet object data(\"muscadet_obj\") muscadet_obj #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: log.ratio, log.ratio  #>  cells: 112, 119 (common: 84, total: 147)  #>  features: 133, 349  #>  feature labels: windows of peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: WGS  #>  clustering: partitions = 0.6, 0.8, 1 ; optimal partition = 1  #>  CNA calling: 2 clusters ; 47 consensus segments including 1 CNA segments  #>  genome: hg38 data(\"mat_counts_atac_ref\", \"mat_counts_rna_ref\") data(\"allele_counts_atac_ref\", \"allele_counts_rna_ref\")  atac_ref <- CreateMuscomicObject(     type = \"ATAC\",     mat_counts = mat_counts_atac_ref,     allele_counts = allele_counts_atac_ref,     features = peaks) rna_ref <- CreateMuscomicObject(     type = \"RNA\",     mat_counts = mat_counts_rna_ref,     allele_counts = allele_counts_rna_ref,     features = genes) muscadet_ref <- CreateMuscadetObject(     omics = list(ATAC = atac_ref, RNA = rna_ref),     genome = \"hg38\") muscadet_ref #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: mat.counts, mat.counts  #>  cells: 99, 97 (common: 78, total: 118)  #>  features: 1000, 500  #>  feature labels: peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: None  #>  clustering: None  #>  CNA calling: None  #>  genome: hg38"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Introduction to muscadet","text":"Several method functions available access data within muscadet/muscomic objects.","code":"library(SeuratObject) # Cells() and Features() methods imported from SeuratObject  # Cell names Cells(muscadet_obj) # list of cells, one element per omic Cells(muscadet_obj)$ATAC # element of the list Cells(muscadet_obj$ATAC) # cells for muscomic object Reduce(union, Cells(muscadet_obj)) # all cells Reduce(intersect, Cells(muscadet_obj)) # common cells  # Feature names Features(muscadet_obj) # list, one element per omic Features(muscadet_obj)$ATAC  # Matrix of raw counts matCounts(muscadet_obj) # list, one element per omic matCounts(muscadet_obj$ATAC)  # Matrix of log ratios matLogRatio(muscadet_obj) # list, one element per omic matLogRatio(muscadet_obj)$ATAC  # Table of feature coordinates coordFeatures(muscadet_obj) # list, one element per omic coordFeatures(muscadet_obj)$RNA library(SeuratObject) # Cells() and Features() methods imported from SeuratObject  # number of cells in total length(Reduce(union, Cells(muscadet_obj))) #> [1] 147 # number of common cells length(Reduce(intersect, Cells(muscadet_obj))) #> [1] 84 # number of cells per omic lapply(Cells(muscadet_obj), length) #> $ATAC #> [1] 112 #>  #> $RNA #> [1] 119 # number of features per omic lapply(Features(muscadet_obj), length) #> $ATAC #> [1] 133 #>  #> $RNA #> [1] 349"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"compute-log-ratios","dir":"Articles","previous_headings":"","what":"Compute log ratios","title":"Introduction to muscadet","text":"Compute genome-wide coverage profiles log ratio (LRR) matrices computeLogRatio() every omic present muscadet object.","code":"# Compute log R ratios from scATAC-seq read counts muscadet <- computeLogRatio(     x = muscadet,     reference = muscadet_ref,     omic = \"ATAC\",     method = \"ATAC\",     minReads = 1, # low value for small example dataset     minPeaks = 1) # low value for small example dataset  # Compute log R ratios from scRNA-seq read counts muscadet <- computeLogRatio(     x = muscadet,     reference = muscadet_ref,     omic = \"RNA\",     method = \"RNA\",     refReads = 2) # low value for small example dataset"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"multimodal-integrated-clustering","dir":"Articles","previous_headings":"","what":"Multimodal integrated clustering","title":"Introduction to muscadet","text":"cells clustered based log ratio profiles clusterMuscadet(), two methods available: method = \"seurat\": Seurat’s graph-based clustering. consists nearest neighbors graph construction weighted combination two modalities selected dimensions PCA cluster determination (see cluster_seurat()). method = \"hclust\": Integration Similarity Network Fusion (SNF) followed hierarchical clustering (see cluster_hclust()).","code":"set.seed(123)  # Perform clustering with \"seurat\" method muscadet_1 <- clusterMuscadet(   x = muscadet_obj,   method = \"seurat\",   res_range = c(0.5, 0.8),   dims_list = list(1:8, 1:8),   knn_seurat = 10, # adapted to low number of cells in example data   knn_range_seurat = 30 # adapted to low number of cells in example data ) set.seed(123)  # Perform clustering with \"hclust\" method muscadet_2 <- clusterMuscadet(   x = muscadet_obj,   k_range = 2:4,   method = \"hclust\",   dist_method = \"euclidean\",   hclust_method = \"ward.D\",   weights = c(1, 1) ) # Number of cells per cluster per partition lapply(muscadet_obj$clustering$clusters, table) #> $`0.6` #>  #>  1  2  #> 84 63  #>  #> $`0.8` #>  #>  1  2  3  #> 62 58 27  #>  #> $`1` #>  #>  1  2  3  4  5  #> 54 25 34 20 14"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"clustering-visualization","dir":"Articles","previous_headings":"","what":"Clustering visualization","title":"Introduction to muscadet","text":"genome-wide coverage profiles clusters visualized heatmap using heatmapMuscadet() chosen clustering partition stored muscadet object. heatmap log ratio averages per clusters can also plotted. Figure 1: Heatmap log ratios averages per cluster integrated genome-wide coverage profiles projected low-dimensional space using Uniform Manifold Approximation Projection (UMAP).","code":"# Plot heatmap  heatmapMuscadet(     muscadet_obj,     filename = file.path(\"figures\", \"heatmap_res0.6.png\"),     partition = 0.6,     title = \"Example | res=0.6\" ) # Plot heatmap of log ratio averages per cluster heatmapMuscadet(     muscadet_obj,     filename = file.path(\"figures\", \"heatmap_res0.6_averages.png\"),     partition = 0.6,     averages = TRUE,     title = \"Example | res=0.6 | Averages per cluster\" ) plotUMAP(muscadet_obj, partition = 0.6)"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"clustering-validation","dir":"Articles","previous_headings":"","what":"Clustering validation","title":"Introduction to muscadet","text":"validate select clustering partition, Silhouette scores stored muscadet object visualized using plotSil() clustering validation indexes plotIndexes(). Figure 2: Silhouette plot clustering partition Figure 3: Plot Silhouette scores across partitions Figure 4: Plot clustering validation indexes across partitions","code":"# View stored silhouette average widths per partition muscadet_obj$clustering$silhouette$sil.w.avg #> $`0.6` #> [1] 0.09474151 #>  #> $`0.8` #> [1] 0.1093522 #>  #> $`1` #> [1] 0.1456324 # Silhouette plot for individual clustering partition plotSil(muscadet_obj, partition = 0.6) # Plot clustering indexes for every stored partitions plotIndexes(muscadet_obj, index = \"silhouette\") # Plot clustering indexes for every stored partitions plotIndexes(muscadet_obj)"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"cna-calling","dir":"Articles","previous_headings":"","what":"CNA calling","title":"Introduction to muscadet","text":"First, clustering partition must selected using assignClusters(). , run mergeCounts() using sample (tumor cells) reference (normal cells) muscadet objects, combine counts per cluster multiple omics . Finally, run cnaCalling() call CNA segments Note Filters depthmin[...] set default might suited data, adapting recommended. Note omics.coverage can set \"ATAC\" use ATAC coverage CNA detection DNA signal tends less noisy RNA.","code":"muscadet_obj <- assignClusters(muscadet_obj, partition = 0.6) table(muscadet_obj$cnacalling$clusters) #>  #>  1  2  #> 84 63 # Merge counts per cluster from all omics from both sample and reference muscadet_obj <- mergeCounts(muscadet_obj, muscadet_obj_ref) muscadet_obj <- cnaCalling(     muscadet_obj,     omics.coverage = \"ATAC\", # only ATAC coverage used     depthmin.a.clusters = 3, # set low thresholds for example data     depthmin.c.clusters = 5,     depthmin.a.allcells = 3,     depthmin.c.allcells = 5,     depthmin.c.nor = 0 )"},{"path":"https://icagen.github.io/muscadet/articles/muscadet.html","id":"cna-profiles","dir":"Articles","previous_headings":"","what":"CNA profiles","title":"Introduction to muscadet","text":"resulting CNA calls visualized using plotProfile() generates multi-panel profile plot per cluster summarizing: Coverage per feature: log R ratios values genes/peaks, segment medians diploid log ratio (purple line) - deviations 0 indicate gains (positive) losses (negative) coverage. Allele data: log odds ratio values (log-odds reference vs alternative allele counts) variant position segment medians - deviation 0 suggests allelic imbalance, useful distinguish LOH, copy-neutral LOH, allele-specific CNAs. Copy number calls segment - total minor copy numbers. CNA status classification segment - gain, loss copy-neutral LOH. Fraction cells estimated harbor CNA segment.   complete CNA profile sample across clusters visualized using plotCNA().","code":"plotProfile(muscadet_obj, data = 1, title = \"Cluster 1 profile\", point.cex = 0.8) plotProfile(muscadet_obj, data = \"allcells\", title = \"Profile for all cells\", point.cex = 0.8) plotCNA(muscadet_obj) plotCNA(muscadet_obj, cf.gradient = FALSE)"},{"path":"https://icagen.github.io/muscadet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marie Denoulet. Maintainer, author. Nils Giordano. Author. Eric Letouzé. Author. Céline Vallot. Author. Stéphane Minvielle. Author. Mia Cherkaoui. Contributor. Florence Magrangeas. Contributor.","code":""},{"path":"https://icagen.github.io/muscadet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Denoulet M, Giordano N, Letouzé E, Vallot C, Minvielle S (2025). muscadet: Multiomics Single-cell Copy number Alterations Detection. R package version 0.1.0, https://github.com/ICAGEN/muscadet.","code":"@Manual{,   title = {muscadet: Multiomics Single-cell Copy number Alterations Detection},   author = {Marie Denoulet and Nils Giordano and Eric Letouzé and Céline Vallot and Stéphane Minvielle},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/ICAGEN/muscadet}, }"},{"path":[]},{"path":"https://icagen.github.io/muscadet/index.html","id":"multiomics-single-cell-copy-number-alterations-detection","dir":"","previous_headings":"","what":"multiomics single-cell copy number alterations detection","title":"Multiomics Single-cell Copy number Alterations Detection","text":"R package identification copy number alterations (CNAs) cancer cells single-cell multiomics data. package muscadet designed : Integration: Integrate information multiple omics (e.g. Multiome matched scATAC-seq scRNA-seq data). Clustering: Cluster cells based genome-wide coverage profiles. Imputation: Impute clusters cells missing data one omic nearest neighbor similarity. Detection: Detect call CNA segments using coverage (log ratio read counts) allelic (read counts per allele) data. Visualization: Visualize genome-wide coverage, clusters cells, UMAP, CNA profiles, etc.","code":""},{"path":"https://icagen.github.io/muscadet/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multiomics Single-cell Copy number Alterations Detection","text":"can install development version muscadet GitHub: get started, read Get Started vignette learn muscadet workflow function usage demo example data.","code":"library(devtools) devtools::install_github(\"ICAGEN/muscadet\")"},{"path":"https://icagen.github.io/muscadet/index.html","id":"detection-of-somatic-copy-number-alterations-from-single-cell-multiomics-data","dir":"","previous_headings":"","what":"Detection of Somatic Copy Number Alterations from Single-Cell Multiomics Data","title":"Multiomics Single-cell Copy number Alterations Detection","text":"Marie Denoulet1, Mia Cherkaoui1, Nils Giordano1, Robin Lanée1, Elise Douillard1,2, Magali Devic1,2, Florence Magrangeas1,2, Stéphane Minvielle1,2, Céline Vallot3,4, Eric Letouzé1,2 1Nantes Université, INSERM, CNRS, Université d’Angers, CRCI2NA, Nantes, France. 2University Hospital Hôtel-Dieu, Nantes, France. 3CNRS UMR3244, Institut Curie, PSL University, Paris, France. 4Translational Research Department, Institut Curie, PSL University, Paris, France identification somatic copy number alterations (CNAs) cancer cells crucial understanding tumor evolution, including clonal dynamics causing relapse, identifying potential therapeutic targets. existing tools provide valuable insights subclonal CNAs, typically limited analyzing one type omics data. response growing use cutting-edge technologies enabling simultaneous sequencing multiple omics individual cells, emerges need new approaches leverage multiomics data integration improve detection CNAs. Addressing need, developed R package, muscadet, integrates multiple single-cell datasets across different omics modalities enhance accuracy resolution CNA detection within tumoral subclones. demonstrated potency approach analysis single-cell Multiome data, integrating single-cell RNA-seq single-cell ATAC-seq datasets common pool cells, across several multiple myeloma samples. muscadet outperformed existing copy number analysis tools scRNA-seq scATAC-seq data, revealing accurate CNA profiles subclones, validated matched whole genome sequencing data. providing unified CNA analysis framework applicable combination single-cell omics data, muscadet empowers researchers unravel clonal structure tumor samples uncover complex genomic alterations driving cancer progression.","code":""},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscadetObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a muscadet object — CreateMuscadetObject","title":"Create a muscadet object — CreateMuscadetObject","text":"Create muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscadetObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a muscadet object — CreateMuscadetObject","text":"","code":"CreateMuscadetObject(   omics,   bulk.lrr = NULL,   bulk.label = NULL,   genome = \"hg38\" )"},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscadetObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a muscadet object — CreateMuscadetObject","text":"omics list muscomic objects (list). names list set names omics final object, list unamed, type taken instead. bulk.lrr data frame containing log R ratio per genomic segments bulk sequencing data (data.frame). One row per segment 4 columns ordered followed: chromosome (integer), start position (integer), end position (integer), Log R ratio value (numeric). bulk.label Label bulk data (character string). genome Reference genome name among: \"hg38\", \"hg19\" \"mm10\" (character string). \"hg38\" default.","code":""},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscadetObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a muscadet object — CreateMuscadetObject","text":"muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscadetObject.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a muscadet object — CreateMuscadetObject","text":"muscadet object can contain several muscomic objects type (ATAC RNA slot type) identical labels (slot label.omic).","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscadetObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a muscadet object — CreateMuscadetObject","text":"","code":"# Create muscomic objects atac <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   allele_counts = allele_counts_atac_tumor,   features = peaks ) rna <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_tumor,   allele_counts = allele_counts_rna_tumor,   features = genes ) atac_ref <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_ref,   allele_counts = allele_counts_atac_ref,   features = peaks ) rna_ref <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_ref,   allele_counts = allele_counts_rna_ref,   features = genes )  # Create muscadet objects muscadet <- CreateMuscadetObject(   omics = list(atac, rna),   bulk.lrr = bulk_lrr,   bulk.label = \"WGS\",   genome = \"hg38\" ) muscadet_ref <- CreateMuscadetObject(   omics = list(atac_ref, rna_ref),   genome = \"hg38\" )"},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscomicObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a muscomic object — CreateMuscomicObject","title":"Create a muscomic object — CreateMuscomicObject","text":"Create muscomic object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscomicObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a muscomic object — CreateMuscomicObject","text":"","code":"CreateMuscomicObject(   type = c(\"ATAC\", \"RNA\"),   mat_counts,   features,   allele_counts = NULL,   label.omic = NULL,   label.features = NULL )"},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscomicObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a muscomic object — CreateMuscomicObject","text":"type Type single cell omic, either \"ATAC\" \"RNA\" (character string). mat_counts Matrix raw counts features x cells (matrix dgCMatrix). Rows features (must correspond id column features), columns cells. features Data frame features (peaks, genes...) coordinates genome (data.frame). contain 4 columns: CHROM Chromosome names character format, e.g. \"15\", \"X\" (character). start Start positions (integer). end End positions (integer). id Unique identifiers, e.g. gene name \"CDH1\" peak identifier CHROM_start_end \"1_1600338_1600838\" (character). match feature identifiers row names mat_counts. allele_counts Data frame allele counts variant positions per cell (data.frame). Variant positions can either common single nucleotide polymorphisms (SNPs) positions individual-specific heterozygous positions retrieved bulk sequencing. data frame format based Variant Calling Format (VCF), thereby must contain following columns : cell, id, CHROM, POS, REF, ALT, RD, AD, DP, (GT). See allele_counts details. label.omic Label single cell omic (character string). default \"scATAC-seq\" used \"ATAC\" type \"scRNA-seq\" \"RNA\" type. label.features Label features (character string). default \"peaks\" used \"ATAC\" type \"genes\" \"RNA\" type.","code":""},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscomicObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a muscomic object — CreateMuscomicObject","text":"muscomic object.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/CreateMuscomicObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a muscomic object — CreateMuscomicObject","text":"","code":"atac <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   allele_counts = allele_counts_atac_tumor,   features = peaks ) atac #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  mat.counts coverage data matrix  #>  112 cells  #>  1000 features: peaks  #>  691 variant positions   rna <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_tumor,   allele_counts = allele_counts_rna_tumor,   features = genes ) rna #> A muscomic object of type RNA labelled scRNA-seq containing:  #>  mat.counts coverage data matrix  #>  119 cells  #>  500 features: genes  #>  373 variant positions   atac_ref <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_ref,   allele_counts = allele_counts_atac_ref,   features = peaks )  rna_ref <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_ref,   allele_counts = allele_counts_rna_ref,   features = genes ) rna_ref #> A muscomic object of type RNA labelled scRNA-seq containing:  #>  mat.counts coverage data matrix  #>  97 cells  #>  500 features: genes  #>  373 variant positions   # without allele counts data (not required for clustering step) atac2 <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   features = peaks ) atac2 #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  mat.counts coverage data matrix  #>  112 cells  #>  1000 features: peaks  #>  0 variant positions"},{"path":"https://icagen.github.io/muscadet/reference/addAlleleCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Add allele counts to a muscadet object — addAlleleCounts","title":"Add allele counts to a muscadet object — addAlleleCounts","text":"function adds allele counts data omics muscadet object. data frames allele_counts list assigned allelic slots omics.","code":""},{"path":"https://icagen.github.io/muscadet/reference/addAlleleCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add allele counts to a muscadet object — addAlleleCounts","text":"","code":"addAlleleCounts(x, allele_counts)"},{"path":"https://icagen.github.io/muscadet/reference/addAlleleCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add allele counts to a muscadet object — addAlleleCounts","text":"x muscadet object. allele_counts list data frames data frame contains allele counts specific omic (list). list must length order number omics x object. data frames must contain following columns : cell, id, CHROM, POS, REF, ALT, RD, AD, DP, GT. See allele_counts details.","code":""},{"path":"https://icagen.github.io/muscadet/reference/addAlleleCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add allele counts to a muscadet object — addAlleleCounts","text":"modified muscadet object updated allele counts allelic slot muscomic object omics slot.","code":""},{"path":"https://icagen.github.io/muscadet/reference/addAlleleCounts.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add allele counts to a muscadet object — addAlleleCounts","text":"allele counts used computing log R ratios cell clustering, mandatory creation muscomic muscadet objects. allele counts data can added objects later addAlleleCounts function, using mergeCounts() function. function also useful add allele counts individual-specific variant positions common muscadet object, example reference muscadet object: common muscadet object reference coverage data can stored unique object use reference computing log R ratios samples, can updated allele counts individual-specific variant positions (e.g. found bulk sequencing) Copy Number Alterations (CNAs) calling.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/addAlleleCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add allele counts to a muscadet object — addAlleleCounts","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\") # data(\"muscadet_obj_ref\")  # Add allele counts data frames to muscadet objects muscadet_obj <- addAlleleCounts(     muscadet_obj,     allele_counts = list(allele_counts_atac_tumor, allele_counts_rna_tumor)) muscadet_obj_ref <- addAlleleCounts(     muscadet_obj_ref,     allele_counts = list(allele_counts_atac_ref, allele_counts_rna_ref))"},{"path":"https://icagen.github.io/muscadet/reference/add_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Labels to a ggplot Object — add_labels","title":"Add Labels to a ggplot Object — add_labels","text":"function adds labels median position group ggplot object. Labels can added either plain text label boxes, optional repelling avoid overlaps (using ggrepel package installed).","code":""},{"path":"https://icagen.github.io/muscadet/reference/add_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Labels to a ggplot Object — add_labels","text":"","code":"add_labels(   p,   labels,   color = \"black\",   repel = TRUE,   label.box = FALSE,   size = 3,   ... )"},{"path":"https://icagen.github.io/muscadet/reference/add_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Labels to a ggplot Object — add_labels","text":"p ggplot object mapping data (ggplot). labels Column name (unquoted) indicating group label display. color Color label text (character). Default \"black\". repel Logical. TRUE(default), overlapping labels repelled using ggrepel package. label.box Logical. TRUE uses boxed label (geom_label) instead plain text (geom_text). Default FALSE. size Size label text (numeric). Default 2. ... Additional arguments passed corresponding underlying geom: geom_text() (repel= FALSE label.box = FALSE) geom_label() (repel= FALSE label.box = TRUE) geom_text_repel() (repel= TRUE label.box = FALSE) geom_label_repel() (repel= TRUE label.box = TRUE)","code":""},{"path":"https://icagen.github.io/muscadet/reference/add_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Labels to a ggplot Object — add_labels","text":"ggplot2 layer (geom_text(), geom_label(), geom_text_repel(), geom_label_repel()).","code":""},{"path":"https://icagen.github.io/muscadet/reference/add_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Labels to a ggplot Object — add_labels","text":"function summarizes data computing median x y positions label group. repel = TRUE, uses ggrepel::geom_text_repel() (label.box = FALSE) ggrepel::geom_label_repel() (label.box = TRUE). repel = FALSE, uses ggplot2::geom_text() (label.box = FALSE) ggplot2::geom_label() (label.box = TRUE). repel = TRUE, ggrepel package must installed.","code":""},{"path":"https://icagen.github.io/muscadet/reference/add_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Labels to a ggplot Object — add_labels","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) library(ggrepel)  p <- ggplot(mtcars, aes(x = wt, y = mpg, color = as.factor(cyl))) +   geom_point()  p2 <- add_labels(   p,   labels = cyl,   repel = TRUE,   label.box = FALSE,   size = 5,   min.segment.length = 0 ) p2  p3 <- add_labels(     p,     labels = cyl,     repel = TRUE,     label.box = TRUE,     size = 3,     box.padding = 1 ) p3  p4 <- add_labels(     p,     labels = cyl,     repel = FALSE,     label.box = TRUE,     size = 4, ) p4 } # }"},{"path":"https://icagen.github.io/muscadet/reference/allele_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data: Allele counts at variation positions — allele_counts","title":"Example data: Allele counts at variation positions — allele_counts","text":"Data frames allele counts variant positions per cell. Variant positions can either common single nucleotide polymorphisms (SNPs) positions individual-specific heterozygous positions retrieved bulk sequencing.","code":""},{"path":"https://icagen.github.io/muscadet/reference/allele_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data: Allele counts at variation positions — allele_counts","text":"","code":"allele_counts_atac_tumor  allele_counts_atac_ref  allele_counts_rna_tumor  allele_counts_rna_ref"},{"path":"https://icagen.github.io/muscadet/reference/allele_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data: Allele counts at variation positions — allele_counts","text":"data frame columns based Variant Call Format (VCF) columns. contains following columns: cell Barcodes cells (character). id Variant unique identifier defined CHROM_POS_REF_ALT, e.g. \"1_920949_C_G\" (character). CHROM Chromosome integer format, e.g. 15 (X Y chromosomes included) (integer). POS Position variant (1-base positions) (integer). REF Reference allele base, \"\" \"C\" \"G\" \"T\" (character). ALT Alternative allele base, \"\" \"C\" \"G\" \"T\" (character). RD Reference allele depth/count (integer). AD Alternative allele depth/count (integer). DP Total depth/count (integer). GT Genotype: \"0/1\" \"1/0\" unphased; \"0|1\" \"1|0\" phased. (character).","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/annotateSegments.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate consensus segments across cluster with CNA states — annotateSegments","title":"Annotate consensus segments across cluster with CNA states — annotateSegments","text":"function annotates consensus segments across clusters using segment-level data cluster. assigns states (.e., gain, loss, cnloh, neutral), computes proportions cells per cluster, defines whether alterations clonal.","code":""},{"path":"https://icagen.github.io/muscadet/reference/annotateSegments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate consensus segments across cluster with CNA states — annotateSegments","text":"","code":"annotateSegments(   x,   consensus_segs,   ncells,   ploidy = 2,   minoverlap = 1e+06,   clonal.thresh = 0.9 )"},{"path":"https://icagen.github.io/muscadet/reference/annotateSegments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate consensus segments across cluster with CNA states — annotateSegments","text":"x data frame containing cluster segments information following required columns: chrom: Chromosome name (factor character). start: Start position segment (numeric). end: End position segment (numeric). cluster: Cluster identifier (numeric integer). tcn.em: Total copy number (EM algorithm) (numeric). lcn.em: Lower copy number (EM algorithm) (numeric). consensus_segs data.frame unique consensus segments. ncells named vector specifying number cells per cluster (numeric vector). names must match cluster identifiers cluster column x. ploidy integer specifying expected ploidy (default 2). Used determine whether segment classified gain, loss, neutral. minoverlap non-negative integer specifying minimum overlap cluster specific segment consensus segment (see IRanges::findOverlaps()) (integer). Default: 1e6. clonal.thresh Minimum cell proportion label segment clonal. Default: 1e6.","code":""},{"path":"https://icagen.github.io/muscadet/reference/annotateSegments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate consensus segments across cluster with CNA states — annotateSegments","text":"data.frame consensus segments annotated per cluster, including CNA state, clonal status, proportion cells per cluster across clusters: ncells: Number cells cluster. prop.cluster: Proportion cells cluster relatively total number cells. gnl: GNL (gain ; neutral ; loss) status integer value (1 ; 0 ; -1). loh: Loss heterozygosity status (logical). state: State segment (gain ; loss ; neu ; cnloh). cna: Segment CNA status (logical). cna_state: State CNA segment (gain ; loss ; cnloh). prop.tot: Proportion cells state across clusters. state_clonal: Clonal state segment (gain ; loss ; neu ; cnloh). cna_clonal: Segment clonal CNA status (logical). cna_clonal_state: Clonal state CNA segment (gain ; loss ; cnloh).","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/annotateSegments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate consensus segments across cluster with CNA states — annotateSegments","text":"","code":"#' # Example data frame segs <- data.frame(     chrom = c(\"chr1\", \"chr1\", \"chr2\", \"chr2\"),     start = c(1.2e6, 1.1e6, 3.1e6, 3.2e6),     end = c(2.5e6, 2.6e6, 5.5e6, 5.7e6),     cluster = c(\"1\", \"2\", \"1\", \"2\"),     cf.em = c(1, 1, 1, 1),     tcn.em = c(1, 2, 3, 3),     lcn.em = c(0, 1, 1, 1) )  consensus_segs <- getSegConsensus(     x = segs,     ncells = c(\"1\" = 50, \"2\" = 30) )  # Annotate consensus segments table <- annotateSegments(     x = segs,     consensus_segs = consensus_segs,     ncells = c(\"1\" = 50, \"2\" = 30) )  print(table) #>   chrom   start     end id cluster cf.em tcn.em lcn.em ncells prop.cluster gnl #> 1  chr1 1200000 2500000  1       1     1      1      0     50        0.625  -1 #> 2  chr2 3100000 5500000  2       1     1      3      1     50        0.625   1 #> 3  chr1 1200000 2500000  1       2     1      2      1     30        0.375   0 #> 4  chr2 3100000 5500000  2       2     1      3      1     30        0.375   1 #>     loh state   cna cna_state prop.tot state_clonal cna_clonal cna_clonal_state #> 1  TRUE  loss  TRUE      loss    0.625         <NA>      FALSE             <NA> #> 2 FALSE  gain  TRUE      gain    1.000         gain       TRUE             gain #> 3 FALSE   neu FALSE      <NA>    0.375         <NA>      FALSE             <NA> #> 4 FALSE  gain  TRUE      gain    1.000         gain       TRUE             gain"},{"path":"https://icagen.github.io/muscadet/reference/assignClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a cluster assignment to a muscadet object — assignClusters","title":"Assign a cluster assignment to a muscadet object — assignClusters","text":"Add user selected cluster assignments cells muscadet object. function allows user choose cluster assignments consider fit data requirements, cluster assignments based data methods.","code":""},{"path":"https://icagen.github.io/muscadet/reference/assignClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a cluster assignment to a muscadet object — assignClusters","text":"","code":"assignClusters(   x,   partition = NULL,   clusters = NULL,   mapping = NULL,   redo_imputation = TRUE,   knn_imp = 10 )"},{"path":"https://icagen.github.io/muscadet/reference/assignClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a cluster assignment to a muscadet object — assignClusters","text":"x muscadet object (muscadet). partition Value specifying clustering partition choose muscadet object (numeric character). either resolution k number cluster (k) used clustering depending clustering method (res_range k_range clusterMuscadet()). provided clusters NULL. clusters custom named vector cluster assignments (vector). vector names must match cell names muscadet object x, least cluster assignments common cells must provided redo_imputation set true, otherwise, cells within muscadet object x must provided. provided partition NULL. mapping Optional named vector specifying remap cluster values (vector). names vector correspond original cluster values, values remapped cluster values. example, c(\"1\" = 1, \"2\" = 1, \"3\" = 2, \"4\" = 3) merge clusters 1 2 1, cluster 3 2, cluster 4 3. redo_imputation Logical. TRUE (default), reruns imputation process assign clusters cells missing data. ensures imputed clusters updated clustering changed due remapping use custom clusters. knn_imp Integer specifying number nearest neighbors cells use imputation (integer). Must positive integer. Default 10.","code":""},{"path":"https://icagen.github.io/muscadet/reference/assignClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a cluster assignment to a muscadet object — assignClusters","text":"muscadet object updated user chosen cluster assignments muscadet_obj$cnacalling$clusters.","code":""},{"path":"https://icagen.github.io/muscadet/reference/assignClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign a cluster assignment to a muscadet object — assignClusters","text":"clusters can taken directly muscadet object clustering results setting partition argument (e.g. muscadet_obj$clustering$clusters[[\"0.8\"]] res=0.8). custom vector cluster assignments can attributed using clusters argument. Either way, clusters assignments can rearranged using mapping argument.","code":""},{"path":"https://icagen.github.io/muscadet/reference/assignClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a cluster assignment to a muscadet object — assignClusters","text":"","code":"if (FALSE) { # \\dontrun{ # Load example muscadet object # data(\"muscadet_obj\")  # Select clustering result for partition = 0.6 muscadet_obj <- assignClusters(muscadet_obj, partition = 0.6) table(muscadet_obj$cnacalling$clusters)  # Assign custom clusters set.seed(42) cell_names <- Reduce(union, SeuratObject::Cells(muscadet_obj)) n1 <- sample(1:length(cell_names), 1) n2 <- length(cell_names) - n1 custom_clusters <- setNames(c(rep.int(1, n1), rep.int(2, n2)), cell_names) table(custom_clusters) muscadet_obj <- assignClusters(muscadet_obj, clusters = custom_clusters) table(muscadet_obj$cnacalling$clusters)  # Assign clusters with remapping # example to remap from partition=0.8 with merging of clusters 2 and 3 clusters <- muscadet_obj$clustering$clusters[[\"0.8\"]] table(clusters) # 3 clusters mapping <- c(\"1\" = 1, \"2\" = 2, \"3\" = 2) # remap to 2 clusters  muscadet_obj <- assignClusters(muscadet_obj, clusters = clusters, mapping = mapping) table(muscadet_obj$cnacalling$clusters) # check original and remapped clusters table(clusters, muscadet_obj$cnacalling$clusters)  muscadet_obj <- assignClusters(muscadet_obj, partition = 0.8, mapping = mapping) table(muscadet_obj$cnacalling$clusters) # check original and remapped clusters table(muscadet_obj$clustering$clusters[[\"0.8\"]],       muscadet_obj$cnacalling$clusters)  # Visualize clusters on heatmap heatmapMuscadet(     muscadet_obj,     partition = 0.8,     filename = file.path(\"heatmap_muscadet_res0.8.png\"),     title = \"Example sample | res=0.8\" ) heatmapMuscadet(     muscadet_obj,     clusters = muscadet_obj$cnacalling$clusters,     filename = file.path(\"heatmap_muscadet_custom_res0.8.png\"),     title = \"Example sample | rearranged clusters from res=0.8\" ) } # }"},{"path":"https://icagen.github.io/muscadet/reference/bulk_lrr.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data: Log R ratio from bulk sequencing data — bulk_lrr","title":"Example data: Log R ratio from bulk sequencing data — bulk_lrr","text":"Data frame containing log R ratio values per genomic segments bulk sequencing data.","code":""},{"path":"https://icagen.github.io/muscadet/reference/bulk_lrr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data: Log R ratio from bulk sequencing data — bulk_lrr","text":"","code":"bulk_lrr"},{"path":"https://icagen.github.io/muscadet/reference/bulk_lrr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data: Log R ratio from bulk sequencing data — bulk_lrr","text":"data frame following columns: CHROM Chromosome integer format, e.g. 15, 23 (X chromosome) (character). start Start position segment (integer). end End position segment (character). lrr Log R ratio segment (\"cnlr.median\" column facets::fitcncf() $cncf data frame) (numeric).","code":""},{"path":"https://icagen.github.io/muscadet/reference/bulk_lrr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Example data: Log R ratio from bulk sequencing data — bulk_lrr","text":"Data obtained whole genome sequencing (WGS) using facets::fitcncf() facets \"Cellular Fraction Copy Numbers Tumor Sequencing\" version 0.6.2: $cncf data frame columns chrom, start, end, cnlr.median.","code":""},{"path":"https://icagen.github.io/muscadet/reference/bulk_lrr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example data: Log R ratio from bulk sequencing data — bulk_lrr","text":"facets-package package Shen R, Seshan VE. FACETS: allele-specific copy number clonal heterogeneity analysis tool high-throughput DNA sequencing. Nucleic Acids Res. 2016 Sep 19;44(16):e131. doi: 10.1093/nar/gkw520. PMID: 27270079; PMCID: PMC5027494.","code":""},{"path":"https://icagen.github.io/muscadet/reference/clusterMuscadet.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi Omics Integration and Clustering on a muscadet Object — clusterMuscadet","title":"Multi Omics Integration and Clustering on a muscadet Object — clusterMuscadet","text":"Performs integration multi omics clustering cells based log ratio data contained muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/clusterMuscadet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi Omics Integration and Clustering on a muscadet Object — clusterMuscadet","text":"","code":"clusterMuscadet(   x,   method = c(\"seurat\", \"hclust\"),   omics = NULL,   knn_imp = 10,   quiet = FALSE,   ... )"},{"path":"https://icagen.github.io/muscadet/reference/clusterMuscadet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi Omics Integration and Clustering on a muscadet Object — clusterMuscadet","text":"x muscadet object containing omics data previously computed log R ratio matrices (muscadet). method clustering method apply (character string). One \"seurat\" \"hclust\".  medthod \"seurat\", arguments cluster_seurat() provided, method \"hclust\", arguments cluster_hclust() provided. Note: \"seurat\" method can applied maximum 2 omics. Default \"seurat\". omics Optional character vector specifying omic names use clustering. Must match names available omics x muscadet object. NULL (default), available omics used. knn_imp Number k nearest neighbors use imputing cluster assignments cells missing one omics. relevant one omic. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE. ... Arguments passed cluster_seurat, cluster_hclust res_range numeric non-negative vector specifying resolution values use Seurat::FindClusters() (numeric vector). Default c(0.1, 0.2, 0.3, 0.4, 0.5). dims_list list vectors PC dimensions use omic (list). Must match length mat_list (e.g., list(1:8) 1 omic ; list(1:8, 1:8) 2 omics). Default first 8 dimensions provided omic. algorithm Integer specifying algorithm modularity optimization Seurat::FindClusters() (1 = original Louvain algorithm; 2 = Louvain algorithm multilevel refinement; 3 = SLM algorithm; 4 = Leiden algorithm). Leiden requires leidenalg python. Default 1. knn_seurat Integer specifying number nearest neighbors used graph construction Seurat-package functions Seurat::FindNeighbors() (k.param) Seurat::FindMultiModalNeighbors() (k.nn) (integer). Default 20. knn_range_seurat Integer specifying approximate number nearest neighbors compute Seurat::FindMultiModalNeighbors() (knn.range) (integer). Default 200. k_range numeric vector integers (≥2) specifying cluster numbers (k) extract hierarchical clustering (numeric vector). Default 2 10. dist_method string specifying distance method Rfast::Dist() (e.g., \"euclidean\", \"manhattan\", \"cosine\") (character string). Default \"euclidean\". hclust_method string specifying hierarchical clustering linkage method fastcluster::hclust() (e.g., \"ward.D\", \"average\") (character string). Default \"ward.D\". weights numeric vector non-negative values length equal number omic (internally normalized sum 1) (numeric vector). specifies relatives weights omic SNF weightedSNF(). Omics weight 0 contribute clustering. NULL (default), weights uniform.","code":""},{"path":"https://icagen.github.io/muscadet/reference/clusterMuscadet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi Omics Integration and Clustering on a muscadet Object — clusterMuscadet","text":"input muscadet object clustering slot updated. slot contains: params List parameters used clustering (list). ... Output objects depending method. See cluster_seurat() cluster_hclust(). clusters named list cluster partitions (named vectors cluster labels) cells (imputed clusters assignments non-common cells), value k_range res_range (list). silhouette list silhouette objects widths cluster partition (list). partition.opt Name optimal cluster partition based maximum average silhouette width.","code":""},{"path":"https://icagen.github.io/muscadet/reference/clusterMuscadet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi Omics Integration and Clustering on a muscadet Object — clusterMuscadet","text":"Two methods available integration clustering common cells omics: Method seurat uses nearest neighbors integration followed graph-based clustering. Method hclust uses Similarity Network Fusion (SNF) integration followed hierarchical clustering. , clusters imputed cells missing data least one omic, similarity using nearest neighbor cells. Finally, silhouette widths computed integrated distance matrix help identify optimal clustering partition.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/clusterMuscadet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi Omics Integration and Clustering on a muscadet Object — clusterMuscadet","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\")  # Perform clustering with \"seurat\" method muscadet_obj <- clusterMuscadet(   x = muscadet_obj,   method = \"seurat\",   res_range = c(0.5, 0.8),   dims_list = list(1:8, 1:8),   knn_seurat = 10, # adapted to low number of cells in example data   knn_range_seurat = 30 # adapted to low number of cells in example data ) #> Clustering method: 'seurat' #> Performing PCA... #> Finding neighbors and constructing graph... #> Computing UMAP... #> Finding clusters... #> Imputing clusters... #> Computing Silhouette scores... #> Done.  # Perform clustering with \"hclust\" method muscadet_obj <- clusterMuscadet(   x = muscadet_obj,   k_range = 2:4,   method = \"hclust\",   dist_method = \"euclidean\",   hclust_method = \"ward.D\",   weights = c(1, 1) ) #> Clustering method: 'hclust' #> Computing distance matrices... #> Computing affinity matrices... #> Performing SNF integration... #> Computing UMAP... #> Performing hierarchical clustering... #> Imputing clusters... #> Computing Silhouette scores... #> Done.  # Retrieve cluster assignments clusters <- muscadet_obj$clustering$clusters lapply(clusters, table) #> $`2` #>  #>  1  2  #> 56 91  #>  #> $`3` #>  #>  1  2  3  #> 60 13 74  #>  #> $`4` #>  #>  1  2  3  4  #> 25 27 13 82  #>"},{"path":"https://icagen.github.io/muscadet/reference/cluster_hclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi Omics Clustering with SNF integration and Hierarchical Clustering — cluster_hclust","title":"Multi Omics Clustering with SNF integration and Hierarchical Clustering — cluster_hclust","text":"Performs integration log R ratio matrices (mat_list) using Similarity Network Fusion (SNF) followed hierarchical clustering, integrated SNF matrix, identify clusters cells specified k number cluster (k_range). 1 omic, integration clustering performed common cells omics.","code":""},{"path":"https://icagen.github.io/muscadet/reference/cluster_hclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi Omics Clustering with SNF integration and Hierarchical Clustering — cluster_hclust","text":"","code":"cluster_hclust(   mat_list,   k_range = seq(2, 10, 1),   dist_method = \"euclidean\",   hclust_method = \"ward.D\",   weights = rep(1, length(mat_list)),   knn_affinity = 40,   var_affinity = 1,   knn_SNF = 40,   iter_SNF = 50,   knn_umap = 20,   quiet = FALSE )"},{"path":"https://icagen.github.io/muscadet/reference/cluster_hclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi Omics Clustering with SNF integration and Hierarchical Clustering — cluster_hclust","text":"mat_list named list log R ratio matrices (cells x features), one per omic layer (list). k_range numeric vector integers (≥2) specifying cluster numbers (k) extract hierarchical clustering (numeric vector). Default 2 10. dist_method string specifying distance method Rfast::Dist() (e.g., \"euclidean\", \"manhattan\", \"cosine\") (character string). Default \"euclidean\". hclust_method string specifying hierarchical clustering linkage method fastcluster::hclust() (e.g., \"ward.D\", \"average\") (character string). Default \"ward.D\". weights numeric vector non-negative values length equal number omic (internally normalized sum 1) (numeric vector). specifies relatives weights omic SNF weightedSNF(). Omics weight 0 contribute clustering. NULL (default), weights uniform. knn_affinity Integer specifying number nearest neighbors used building affinity matrices SNFtool::affinityMatrix() (integer). Default 40. var_affinity Numeric value variance parameter (Gaussian kernel width sigma) building affinity matrix SNFtool::affinityMatrix() (numeric). Default 1. knn_SNF Integer specifying number nearest neighbors used Similarity Network Fusion (SNF) weightedSNF() (integer). Default 40. iter_SNF Integer specifying number iterations SNF weightedSNF() (integer). Default 50. knn_umap Integer specifying number nearest neighbors used manifold approximation (UMAP) (see uwot::umap()). Default 20. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/cluster_hclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi Omics Clustering with SNF integration and Hierarchical Clustering — cluster_hclust","text":"list containing: params List parameters used clustering (list). SNF Fused similarity matrix computed SNF (matrix). dist Distance matrix derived SNF similarity (matrix). hclust Hierarchical clustering object fastcluster::hclust() (hclust). umap UMAP coordinates (matrix). clusters named list clustering results (vectors cluster labels) value k_range (list).","code":""},{"path":"https://icagen.github.io/muscadet/reference/cluster_hclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi Omics Clustering with SNF integration and Hierarchical Clustering — cluster_hclust","text":"function calculates pairwise distances cells within omic dataset using specified dist_method (using common cells omics). constructs affinity matrices based distances, applies SNF generate fused similarity matrix. weights can assigned omic dataset prioritize certain data types others, allowing users tailor analysis based characteristics importance dataset. performs hierarchical clustering using specified hclust_method assign clusters common cells. Results given cluster assignments number cluster specified k_range.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/cluster_hclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi Omics Clustering with SNF integration and Hierarchical Clustering — cluster_hclust","text":"","code":"if (FALSE) { # \\dontrun{ # Load example muscadet object # data(\"muscadet_obj\")  # Format input # transpose matrices to: cells x features matrices mat_list <- lapply(muscadet::matLogRatio(muscadet_obj), t)  # Run integration & clustering result <- cluster_hclust(mat_list, k_range = 2:4)  # View results lapply(result$clusters, table) } # }"},{"path":"https://icagen.github.io/muscadet/reference/cluster_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi Omics Clustering using Seurat Multi Modal Graph-based Clustering — cluster_seurat","title":"Multi Omics Clustering using Seurat Multi Modal Graph-based Clustering — cluster_seurat","text":"Performs graph-based clustering cells using Seurat-package, based one two log R ratio matrices (mat_list), including shared nearest neighbors (SNN) graph construction selected dimensions PCA (dims_list), identify clusters cells specified resolution (res_range).","code":""},{"path":"https://icagen.github.io/muscadet/reference/cluster_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi Omics Clustering using Seurat Multi Modal Graph-based Clustering — cluster_seurat","text":"","code":"cluster_seurat(   mat_list,   res_range = seq(0.1, 0.5, 0.1),   dims_list = rep(list(1:8), length(mat_list)),   algorithm = 1,   knn_seurat = 20,   knn_range_seurat = 200,   max_dim = 200,   quiet = FALSE )"},{"path":"https://icagen.github.io/muscadet/reference/cluster_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi Omics Clustering using Seurat Multi Modal Graph-based Clustering — cluster_seurat","text":"mat_list named list log R ratio matrices (cells x features), one per omic layer (list). res_range numeric non-negative vector specifying resolution values use Seurat::FindClusters() (numeric vector). Default c(0.1, 0.2, 0.3, 0.4, 0.5). dims_list list vectors PC dimensions use omic (list). Must match length mat_list (e.g., list(1:8) 1 omic ; list(1:8, 1:8) 2 omics). Default first 8 dimensions provided omic. algorithm Integer specifying algorithm modularity optimization Seurat::FindClusters() (1 = original Louvain algorithm; 2 = Louvain algorithm multilevel refinement; 3 = SLM algorithm; 4 = Leiden algorithm). Leiden requires leidenalg python. Default 1. knn_seurat Integer specifying number nearest neighbors used graph construction Seurat-package functions Seurat::FindNeighbors() (k.param) Seurat::FindMultiModalNeighbors() (k.nn) (integer). Default 20. knn_range_seurat Integer specifying approximate number nearest neighbors compute Seurat::FindMultiModalNeighbors() (knn.range) (integer). Default 200. max_dim Integer specifying maximum number principal components used PCA computation stats::prcomp() (integer). Default 200. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/cluster_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi Omics Clustering using Seurat Multi Modal Graph-based Clustering — cluster_seurat","text":"list containing: params List parameters used clustering (list). pcs List principal components summaries omic (list summary.prcomp stats::prcomp). nn Nearest neighbors object (Neighbor SeuratObject::Neighbor). graph Shared nearest neighbors graph (Graph SeuratObject::Graph). dist Distance matrix derived graph (matrix). umap UMAP coordinates (matrix). clusters named list clustering results (vectors cluster labels) value res_range (list).","code":""},{"path":"https://icagen.github.io/muscadet/reference/cluster_seurat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi Omics Clustering using Seurat Multi Modal Graph-based Clustering — cluster_seurat","text":"two omics: multimodal integration performed using Seurat::FindMultiModalNeighbors() (weighted shared nearest neighbors graph). common cells omics used. single omic: Seurat::FindNeighbors() (shared nearest neighbors graph) used.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/cluster_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi Omics Clustering using Seurat Multi Modal Graph-based Clustering — cluster_seurat","text":"","code":"if (FALSE) { # \\dontrun{ # Load example muscadet object # data(\"muscadet_obj\")  # Format input # transpose matrices to: cells x features matrices mat_list <- lapply(muscadet::matLogRatio(muscadet_obj), t)  # Run integration & clustering result <- cluster_seurat(mat_list, res_range = c(0.1, 0.3, 0.5))  # View results lapply(result$clusters, table) } # }"},{"path":"https://icagen.github.io/muscadet/reference/cnaCalling.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","title":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","text":"Performs copy number alteration (CNA) analysis muscadet object processing allelic coverage counts across clusters evaluating cell fractions copy numbers.","code":""},{"path":"https://icagen.github.io/muscadet/reference/cnaCalling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","text":"","code":"cnaCalling(   x,   omics.coverage = NULL,   depthmin.a.clusters = 30,   depthmin.c.clusters = 50,   depthmin.a.allcells = 30,   depthmin.c.allcells = 50,   depthmin.c.nor = 1000,   depthmax.nor = NULL,   het.thresh = 0.25,   snp.nbhd = 250,   hetscale = TRUE,   cval1 = 25,   cval2 = 150,   min.nhet = 5,   clonal.thresh = 0.9,   cf.thresh = 0.5,   dist.breakpoints = 1e+06,   minoverlap = 1e+06,   ploidy = \"auto\",   dipLogR = NULL,   quiet = FALSE )"},{"path":"https://icagen.github.io/muscadet/reference/cnaCalling.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","text":"function uses several functions facets-package package, including: facets::clustersegs(), facets::emcncf(), facets::findDiploidLogR(), facets::fitcncf(), facets::procSample(), facets::procSnps(), adapted function preProcSample2(). Seshan VE, Shen R (2021). facets: Cellular Fraction Copy Numbers Tumor Sequencing. R package version 0.6.2, https://github.com/mskcc/facets.","code":""},{"path":"https://icagen.github.io/muscadet/reference/cnaCalling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","text":"x muscadet object. Must contain: Clustering assignments cnacalling$clusters slot (use assignClusters()). Combined allelic coverage counts per cluster cnacalling$combined.counts slot (use mergeCounts()). omics.coverage vector omics names select coverage log R ratio data. RECOMMENDED: select \"ATAC\" ATAC RNA omics available, ATAC coverage (DNA) signal less noisy RNA signal. default, NULL selects available data. depthmin..clusters Minimum allelic depth per clusters tumor cells (default: 30). depthmin.c.clusters Minimum coverage depth per clusters tumor cells (default: 50). depthmin..allcells Minimum allelic depth tumor cells (default: 30). depthmin.c.allcells Minimum coverage depth tumor cells (default: 50). depthmin.c.Minimum coverage depth normal sample (default: 1000). depthmax.Optional. Maximum depth normal sample (default: NULL). het.thresh VAF (Variant Allele Frequency) threshold call variant positions heterozygous preProcSample2() (default: 0.25). snp.nbhd Window size selecting SNP loci reduce serial correlation preProcSample2() (default: 250). hetscale Logical value indicating whether log odds ratio (logOR) scaled give weight test statistics segmentation clustering preProcSample2(). (default: TRUE) cval1 Critical value segmentation preProcSample2() (default: 25). cval2 Critical value segmentation facets::procSample() (default: 150). min.nhet Minimum number heterozygous positions segment facets::procSample() facets::emcncf() (default: 5). clonal.thresh Threshold minimum cell proportion label segment clonal (default: 0.9). cf.thresh Numeric threshold set minimum cell fraction (CF) allowed. CNA segments CF value considered neutral (.e., 2:1). default 0.5. Can set 0 NULL disable threshold retain segments regardless CF. dist.breakpoints Minimum distance breakpoints define distinct segments (see getSegConsensus()) (default: 1e6). minoverlap Minimum distance cluster specific segment consensus segment overlap (see annotateSegments()) (default: 1e6). ploidy Specifies ploidy assumption: \"auto\", \"median\", numeric value (default: \"auto\"). dipLogR Optional. Numeric value specifying expected log ratio diploid regions use analysis. NULL, default, diploid log ratio estimated automatically data. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/cnaCalling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","text":"modified muscadet object added CNA analysis results cnacalling slot, including: filtered counts positions, segmentation data clusters cells, consensus segments across clusters based breakpoints, diploid log R ratio, purity ploidy. Details cnacalling slot: combined.counts.filtered: Filtered counts per clusters. combined.counts.allcells: Counts summed cells (cluster distinction). combined.counts.allcells.filtered: Filtered counts summed cells (cluster distinction). positions: Data frame positions per cluster analysis. Positions rows associated data columns: chrom, maploc (position), rCountT (read count tumor), rCountN (read count normal), vafT (variant allele frequency tumor), vafN (variant allele frequency normal), cluster (cluster id), signal (whether counts come coverage allelic data), het (heterozygous status), keep (whether keep position), gcpct (GC percentage), gcbias (GC bias correction), cnlr (log R ratio), valor (log odds ratio), lorvar (variance log odds ratio), seg0, seg_ori (segment original id within cluster), seg (segment id), segclust (cluster segments id), vafT.allcells (vairiant allele frequency tumor cells), colVAR (integer allelic position color depending vafT.allcells). segments: Data frame segments per cluster analysis. Segments rows associated data columns: chrom, seg (segment id), num.mark (number positions segment), nhet (number heterezygous positions segment), cnlr.median (segment log R ratio median), mafR (segment square expected log odds ratio), vafT.median (segment variant allele frequency median), cluster (cluster id), seg_ori (segment original id within cluster), segclust (cluster segments id), cnlr.median.clust (segment cluster log R ratio median), mafR.clust (segment cluster square expected log odds ratio), cf (cell fraction), tcn (total copy number), lcn (lower copy number), start, end, cf.em (cell fraction computed EM algorithm), tcn.em, (total copy number computed EM algorithm), lcn.em (lower copy number computed EM algorithm). positions.allcells: positions cells analysis. segments.allcells: segments cells analysis. consensus.segs: Data frame unique consensus segments across clusters, cna (logical) cna_clonal (logical) information. table: Data frame consensus segments across clusters associated information per cluster columns: chrom, start, end, id, cluster, cf.em (cell fraction computed EM algorithm), tcn.em (total copy number computed EM algorithm), lcn.em (lower copy number computed EM algorithm), ncells (number cells cluster), prop.cluster (proportion cells per cluster), gnl (gain;neutral;loss : 1;0;-1), loh (loss heterozygosity status), state (state segments), cna (whether segment CNA), cna_state (state CNA segments), prop.tot (proportion cells state per segment), state_clonal (state segment prop.tot clonal.thresh), cna_clonal (whether segment clonal CNA), cna_clonal_state (state clonal CNA segments). ncells: Vector number cells per cluster. dipLogR.clusters: Diploid log R ratio estimated per cluster analysis. dipLogR.allcells: Diploid log R ratio estimated cells analysis. purity.clusters: Purity estimated per cluster analysis. purity.allcells: Purity estimated cells analysis. ploidy.clusters: Ploidy estimated per cluster analysis. ploidy.allcells: Ploidy estimated cells analysis. ploidy: Ploidy used CNA analysis.","code":""},{"path":"https://icagen.github.io/muscadet/reference/cnaCalling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","text":"Shen R, Seshan VE. FACETS: allele-specific copy number clonal heterogeneity analysis tool high-throughput DNA sequencing. Nucleic Acids Res. 2016 Sep 19;44(16):e131. doi: 10.1093/nar/gkw520.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/cnaCalling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Number Alteration (CNA) Calling from muscadet object — cnaCalling","text":"","code":"library(\"facets\") #> Loading required package: pctGCdata  # Load example muscadet object # data(\"muscadet_obj\")  muscadet_obj <- cnaCalling(muscadet_obj,                            omics.coverage = \"ATAC\",                            depthmin.a.clusters = 3, # set low thresholds for example data                            depthmin.c.clusters = 5,                            depthmin.a.allcells = 3,                            depthmin.c.allcells = 5,                            depthmin.c.nor = 0) #> Selecting coverage data from omic(s): ATAC #> Filtering positions per clusters based on provided filters... #> Filtering allelic positions: tumor depth >= 3 reads #> Filtering coverage positions: tumor depth >= 5 reads #> Filtering coverage positions: normal depth >= 0 reads #> From 1733 positions to 404 positions #> Performing segmentation per cluster... #> Finding diploid log R ratio on clusters... #> Diploid log R ratio = -0.279348299298531 #> Computing cell fractions and copy numbers on clusters... #> Warning: no non-missing arguments to max; returning -Inf #> Filtering positions on all cells based on provided filters... #> Filtering allelic positions: tumor depth >= 3 reads #> Filtering coverage positions: tumor depth >= 5 reads #> Filtering coverage positions: normal depth >= 0 reads #> From 1270 positions to 392 positions #> Performing segmentation on all cells... #> Computing cell fractions and copy numbers on all cells... #> Finding consensus segments between clusters..."},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatio.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log R ratios — computeLogRatio","title":"Compute log R ratios — computeLogRatio","text":"Computes log R ratios raw count matrices within muscadet objects. log R ratios values computed based read counts sample muscadet object versus read counts reference muscadet object. output sample muscadet object, newly computed matrix log R ratios added selected omic.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log R ratios — computeLogRatio","text":"","code":"computeLogRatio(   x,   reference,   omic,   method = NULL,   new.label.features = NULL,   remove.raw = TRUE,   quiet = FALSE,   all_steps = FALSE,   ... )"},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log R ratios — computeLogRatio","text":"x muscadet object containing sample data (muscadet). reference Another muscadet object containing reference data (muscadet). omic Name omic apply function (character string). method Method apply selected omic (character string). Supported methods \"ATAC\" \"RNA\": \"ATAC\" method calls computeLogRatioATAC() function \"RNA\" method calls computeLogRatioRNA() function NULL omic type either \"ATAC\" \"RNA\", corresponding method applied. new.label.features New label features (character string). NULL, label remains unchanged using \"RNA\" method becomes \"windows peaks\" using \"ATAC\" method. remove.raw TRUE FALSE (logical). Whether remove raw count matrices. TRUE default reduce object size. Setting FALSE keep raw count matrices within object. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE. all_steps Logical value indicate whether matrices step log ratio computation kept returned (logical). IMPORTANT: TRUE, function return updated muscadet object list matrices step log ratio computation (see Value section). Default FALSE. ... Arguments passed computeLogRatioATAC, computeLogRatioRNA windowSize Size windows base pairs (integer value). default: 10e6 (10 Mbp). slidingSize Distance start positions sliding windows base pairs (integer value). set value windowSize, windows overlap. default: 2e6 (2 Mbp). minReads Minimum read average per window reference cells (integer value). default: 5. minPeaks Minimum number peaks per window (integer value). default: 100. genesPerWindow Number genes per moving window (integer value). default: 101. refReads Minimum reads reference cells (integer value). default: 100. refMeanReads Minimum average reads per reference cell (integer value). default: 0.01. thresh_capping Threshold cap range log R ratio values (numeric value). default: 3.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log R ratios — computeLogRatio","text":"muscadet object corresponding sample muscadet object (x) containing computed log R ratio matrix coverage slot selected omic. all_steps argument set TRUE, returns list intermediate matrices matTumor matRef every step step01 step08 (step06 method = \"ATAC\"), coord table features coordinates associated data, params list parameters used function.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute log R ratios — computeLogRatio","text":"Log R ratios computation steps described functions: computeLogRatioATAC() computeLogRatioRNA()","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute log R ratios — computeLogRatio","text":"","code":"# Create muscomic objects atac <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   allele_counts = allele_counts_atac_tumor,   features = peaks ) rna <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_tumor,   allele_counts = allele_counts_rna_tumor,   features = genes ) atac_ref <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_ref,   allele_counts = allele_counts_atac_ref,   features = peaks ) rna_ref <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_ref,   allele_counts = allele_counts_rna_ref,   features = genes )  # Create muscadet objects muscadet <- CreateMuscadetObject(   omics = list(atac, rna),   bulk.lrr = bulk_lrr,   bulk.label = \"WGS\",   genome = \"hg38\" ) muscadet_ref <- CreateMuscadetObject(   omics = list(atac_ref, rna_ref),   genome = \"hg38\" )  # compute log R ratios for ATAC muscadet <- computeLogRatio(   x = muscadet,   reference = muscadet_ref,   omic = \"ATAC\",   method = \"ATAC\",   minReads = 1, # low value for example subsampled datasets   minPeaks = 1 # low value for example subsampled datasets ) #> -- computeLogRatio: Method 'ATAC' using computeLogRatioATAC(). #> Step 01 - Group peaks in windows: window size set at 10 Mb, sliding by 2 Mb #> Step 02 - Filtering windows: Minimum of 1 peaks per window with a minimum average of 1 read(s) #> Step 03 - Normalization for sequencing depth: Normalized counts per million #> Step 04 - Log transformation and normalization by reference data: log R ratio #> Step 05 - Capping the range of values: threshold = 3 #> Step 06 - [No step 06 for scATAC-seq] #> Step 07 - Centering of cells #> Step 08 - Correcting by reference variability #> Done.  # compute log R ratios for RNA muscadet <- computeLogRatio(   x = muscadet,   reference = muscadet_ref,   omic = \"RNA\",   method = \"RNA\",   refReads = 2 # low value for example subsampled datasets ) #> -- computeLogRatio: Method 'RNA' using computeLogRatioRNA(). #> Step 01 - Match genes in count matrix with coordinates #> Step 02 - Filtering genes: Minimum of 2 read(s) in reference cells and minimum of 0.01 read(s) in average per reference cell #> Step 03 - Normalization for sequencing depth: Normalized counts per million #> Step 04 - Log transformation and normalization by reference data: log R ratio #> Step 05 - Capping the range of values: threshold = 3 #> Step 06 - Smoothing values on gene windows: 101 genes per window #> Step 07 - Centering of cells #> Step 08 - Correcting by reference variability #> Done."},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioATAC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log R ratios for scATAC-seq data — computeLogRatioATAC","title":"Compute log R ratios for scATAC-seq data — computeLogRatioATAC","text":"Compute log R ratios raw count matrices method specifically adapted scATAC-seq data. counts per peaks grouped counts per windows peaks, thereby features become windows peaks instead peaks.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioATAC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log R ratios for scATAC-seq data — computeLogRatioATAC","text":"","code":"computeLogRatioATAC(   matTumor,   matRef,   peaksCoord,   genome = \"hg38\",   windowSize = 1e+07,   slidingSize = 2e+06,   minReads = 5,   minPeaks = 100,   thresh_capping = 3,   all_steps = FALSE,   quiet = FALSE )"},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioATAC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log R ratios for scATAC-seq data — computeLogRatioATAC","text":"matTumor Raw count matrix features x cells tumor/sample cells (matrix dgCMatrix). matRef Raw count matrix features x cells reference cells (matrix dgCMatrix). peaksCoord Data frame peak coordinates columns CHROM, start, end, id (data.frame). genome Reference genome name among: \"hg38\", \"hg19\" \"mm10\" (character string). default: \"hg38\". windowSize Size windows base pairs (integer value). default: 10e6 (10 Mbp). slidingSize Distance start positions sliding windows base pairs (integer value). set value windowSize, windows overlap. default: 2e6 (2 Mbp). minReads Minimum read average per window reference cells (integer value). default: 5. minPeaks Minimum number peaks per window (integer value). default: 100. thresh_capping Threshold cap range log R ratio values (numeric value). default: 3. all_steps TRUE FALSE (logical). Whether keep intermediate result every step final object. default: FALSE. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioATAC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log R ratios for scATAC-seq data — computeLogRatioATAC","text":"all_steps set FALSE, list containing: matTumor Matrix log R ratio values features x cells tumor/sample cells (matrix). matRef Matrix log R ratio values features x cells reference cells (matrix). params List parameters set windowSize, slidingSize, minReads, minPeaks thresh_capping arguments (list). coord Data frame coordinates windows peaks associated data along different steps (data.frame). Columns: CHROM, start, end, width, id: coordinates unique identifier windows (depends windowSize slidingSize arguments). nPeaks: number peaks per window. sumReads.tum/ref: sum read counts cells tumor reference cells. meanReads.tum/ref: mean read counts per cells tumor reference cells. sdReads.tum/ref: standard deviation read counts per cells tumor reference cells. keep: logical, TRUE windows keep filtering based coverage (depends minPeaks meanReads arguments). meanReads/sdReads.norm.tum/ref: mean/sd normalized counts per million tumor/reference cells. meanLRR/sdReads.raw.tum/ref: mean/sd raw log R ratio (LRR) tumor/reference cells. meanLRR/sdLRR.cap.tum/ref: mean/sd capped log R ratio (LRR) tumor/reference cells (depends thresh_capping argument). meanLRR/sdLRR.cent.tum/ref: mean/sd centered log R ratio (LRR) tumor/reference cells. meanLRR/sdLRR.corr.tum/ref: mean/sd final log R ratio (LRR) corrected reference variability tumor/reference cells.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioATAC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute log R ratios for scATAC-seq data — computeLogRatioATAC","text":"raw count matrix transformed log R ratios following steps: Group peaks windows (windowSize slidingSize arguments) Filtering coverage (minPeaks meanReads arguments) Normalization sequencing depth Log transformation normalization reference data: log R ratio Capping range values (thresh_capping argument) Centering cells Correcting reference variability","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioATAC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute log R ratios for scATAC-seq data — computeLogRatioATAC","text":"","code":"# Create muscomic objects atac <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   allele_counts = allele_counts_atac_tumor,   features = peaks ) rna <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_tumor,   allele_counts = allele_counts_rna_tumor,   features = genes ) atac_ref <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_ref,   allele_counts = allele_counts_atac_ref,   features = peaks ) rna_ref <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_ref,   allele_counts = allele_counts_rna_ref,   features = genes )  # Create muscadet objects muscadet <- CreateMuscadetObject(   omics = list(atac, rna),   bulk.lrr = bulk_lrr,   bulk.label = \"WGS\",   genome = \"hg38\" ) muscadet_ref <- CreateMuscadetObject(   omics = list(atac_ref, rna_ref),   genome = \"hg38\" )  # Compute log R ratio for ATAC obj_atac <- computeLogRatioATAC(   matTumor = matCounts(muscadet)$ATAC,   matRef = matCounts(muscadet_ref)$ATAC,   peaksCoord = coordFeatures(muscadet)$ATAC,   genome = slot(muscadet, \"genome\"),   minReads = 1, # low value for example subsampled datasets   minPeaks = 1 # low value for example subsampled datasets ) #> Step 01 - Group peaks in windows: window size set at 10 Mb, sliding by 2 Mb #> Step 02 - Filtering windows: Minimum of 1 peaks per window with a minimum average of 1 read(s) #> Step 03 - Normalization for sequencing depth: Normalized counts per million #> Step 04 - Log transformation and normalization by reference data: log R ratio #> Step 05 - Capping the range of values: threshold = 3 #> Step 06 - [No step 06 for scATAC-seq] #> Step 07 - Centering of cells #> Step 08 - Correcting by reference variability table(obj_atac$coord$keep) #>  #> FALSE  TRUE  #>  1329   133   # With results form every step when `all_steps = TRUE` obj_atac_all <- computeLogRatioATAC(   matTumor = matCounts(muscadet)$ATAC,   matRef = matCounts(muscadet_ref)$ATAC,   peaksCoord = coordFeatures(muscadet)$ATAC,   genome = slot(muscadet, \"genome\"),   minReads = 1, # low value for example subsampled datasets   minPeaks = 1, # low value for example subsampled datasets   all_steps = TRUE ) #> Step 01 - Group peaks in windows: window size set at 10 Mb, sliding by 2 Mb #> Step 02 - Filtering windows: Minimum of 1 peaks per window with a minimum average of 1 read(s) #> Step 03 - Normalization for sequencing depth: Normalized counts per million #> Step 04 - Log transformation and normalization by reference data: log R ratio #> Step 05 - Capping the range of values: threshold = 3 #> Step 06 - [No step 06 for scATAC-seq] #> Step 07 - Centering of cells #> Step 08 - Correcting by reference variability names(obj_atac_all) #> [1] \"step01\" \"step02\" \"step03\" \"step04\" \"step05\" \"step07\" \"step08\" \"params\" #> [9] \"coord\"  table(obj_atac_all$coord$keep) #>  #> FALSE  TRUE  #>  1329   133  nrow(obj_atac_all$step08$matTumor) #> [1] 133"},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioRNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log R ratios for scRNA-seq data — computeLogRatioRNA","title":"Compute log R ratios for scRNA-seq data — computeLogRatioRNA","text":"Compute log R ratios raw count matrices method specifically adapted scRNA-seq data.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioRNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log R ratios for scRNA-seq data — computeLogRatioRNA","text":"","code":"computeLogRatioRNA(   matTumor,   matRef,   genesCoord,   genome = \"hg38\",   genesPerWindow = 101,   refReads = 100,   refMeanReads = 0.01,   thresh_capping = 3,   all_steps = FALSE,   quiet = FALSE )"},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioRNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log R ratios for scRNA-seq data — computeLogRatioRNA","text":"matTumor Raw count matrix features x cells tumor/sample cells (matrix dgCMatrix). matRef Raw count matrix features x cells reference cells (matrix dgCMatrix). genesCoord Data frame gene coordinates columns CHROM, start, end, id (data.frame). genome Reference genome name among: \"hg38\", \"hg19\" \"mm10\" (character). default: \"hg38\". genesPerWindow Number genes per moving window (integer value). default: 101. refReads Minimum reads reference cells (integer value). default: 100. refMeanReads Minimum average reads per reference cell (integer value). default: 0.01. thresh_capping Threshold cap range log R ratio values (numeric value). default: 3. all_steps TRUE FALSE (logical). Whether keep intermediate result every step final object. default: FALSE. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioRNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log R ratios for scRNA-seq data — computeLogRatioRNA","text":"all_steps set FALSE, list containing: matTumor Matrix log R ratio values features x cells tumor/sample cells (matrix). matRef Matrix log R ratio values features x cells reference cells (matrix). params List parameters set genesPerWindow, refMeans, refMeanReads thresh_capping arguments (list). coord Data frame coordinates windows peaks associated data along different steps (data.frame). Columns : CHROM, start, end, id: coordinates name genes. sumReads.tum/ref: sum read counts cells tumor reference cells. meanReads.tum/ref: mean read counts per cells tumor reference cells. sdReads.tum/ref: standard deviation read counts per cells tumor reference cells. keep: logical, TRUE genes keep filtering based reference coverage (depends refReads refMeanReads arguments). meanReads/sdReads.norm.tum/ref: mean/sd normalized counts per million tumor/reference cells. meanLRR/sdReads.raw.tum/ref: mean/sd raw log R ratio (LRR) tumor/reference cells. meanLRR/sdLRR.cap.tum/ref: mean/sd capped log R ratio (LRR) tumor/reference cells (depends thresh_capping argument). meanLRR/sdLRR.smoo.tum/ref: mean/sd smoothed log R ratio (LRR) tumor/reference cells (means moving windows defined genesPerWindow argument). meanLRR/sdLRR.cent.tum/ref: mean/sd centered log R ratio (LRR) tumor/reference cells. meanLRR/sdLRR.corr.tum/ref: mean/sd final log R ratio (LRR) corrected reference variability tumor/reference cells.","code":""},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioRNA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute log R ratios for scRNA-seq data — computeLogRatioRNA","text":"raw count matrix transformed log R ratios following steps: Match genes count matrix coordinates Filtering coverage (refReads refMeanReads arguments) Normalization sequencing depth Log transformation normalization reference data: log R ratio Capping range values (thresh_capping argument) Smoothing genes windows Centering cells Correcting reference variability","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/computeLogRatioRNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute log R ratios for scRNA-seq data — computeLogRatioRNA","text":"","code":"# Create muscomic objects atac <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   allele_counts = allele_counts_atac_tumor,   features = peaks ) rna <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_tumor,   allele_counts = allele_counts_rna_tumor,   features = genes ) atac_ref <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_ref,   allele_counts = allele_counts_atac_ref,   features = peaks ) rna_ref <- CreateMuscomicObject(   type = \"RNA\",   mat_counts = mat_counts_rna_ref,   allele_counts = allele_counts_rna_ref,   features = genes )  # Create muscadet objects muscadet <- CreateMuscadetObject(   omics = list(atac, rna),   bulk.lrr = bulk_lrr,   bulk.label = \"WGS\",   genome = \"hg38\" ) muscadet_ref <- CreateMuscadetObject(   omics = list(atac_ref, rna_ref),   genome = \"hg38\" )  # Compute log R ratio for RNA obj_rna <- computeLogRatioRNA(   matTumor = matCounts(muscadet)$RNA,   matRef = matCounts(muscadet_ref)$RNA,   genesCoord = coordFeatures(muscadet)$RNA,   genome = slot(muscadet, \"genome\"),   refReads = 2 # low value for example subsampled datasets ) #> Step 01 - Match genes in count matrix with coordinates #> Step 02 - Filtering genes: Minimum of 2 read(s) in reference cells and minimum of 0.01 read(s) in average per reference cell #> Step 03 - Normalization for sequencing depth: Normalized counts per million #> Step 04 - Log transformation and normalization by reference data: log R ratio #> Step 05 - Capping the range of values: threshold = 3 #> Step 06 - Smoothing values on gene windows: 101 genes per window #> Step 07 - Centering of cells #> Step 08 - Correcting by reference variability table(obj_rna$coord$keep) #>  #> FALSE  TRUE  #>   151   349   # With results form every step when `all_steps = TRUE` obj_rna_all <- computeLogRatioRNA(   matTumor = matCounts(muscadet)$RNA,   matRef = matCounts(muscadet_ref)$RNA,   genesCoord = coordFeatures(muscadet)$RNA,   genome = slot(muscadet, \"genome\"),   refReads = 2, # low value for example subsampled datasets   all_steps = TRUE ) #> Step 01 - Match genes in count matrix with coordinates #> Step 02 - Filtering genes: Minimum of 2 read(s) in reference cells and minimum of 0.01 read(s) in average per reference cell #> Step 03 - Normalization for sequencing depth: Normalized counts per million #> Step 04 - Log transformation and normalization by reference data: log R ratio #> Step 05 - Capping the range of values: threshold = 3 #> Step 06 - Smoothing values on gene windows: 101 genes per window #> Step 07 - Centering of cells #> Step 08 - Correcting by reference variability names(obj_rna_all) #>  [1] \"step01\" \"step02\" \"step03\" \"step04\" \"step05\" \"step06\" \"step07\" \"step08\" #>  [9] \"params\" \"coord\"  table(obj_rna_all$coord$keep) #>  #> FALSE  TRUE  #>   151   349  nrow(obj_rna_all$step08$matTumor) #> [1] 349"},{"path":"https://icagen.github.io/muscadet/reference/features.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data: Feature coordinates — features","title":"Example data: Feature coordinates — features","text":"Data frames features (peaks, genes...) coordinates genome.","code":""},{"path":"https://icagen.github.io/muscadet/reference/features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data: Feature coordinates — features","text":"","code":"genes  peaks"},{"path":"https://icagen.github.io/muscadet/reference/features.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data: Feature coordinates — features","text":"data frame following columns: CHROM Chromosome names character format, e.g. \"15\", \"X\" (character). start Start positions (integer). end End positions (character). id Unique identifiers, e.g. gene name \"CDH1\" peak identifier CHROM_start_end \"1_1600338_1600838\" (character).","code":""},{"path":"https://icagen.github.io/muscadet/reference/genome_chrom.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome chromosome sizes (internal data) — genome_chrom","title":"Genome chromosome sizes (internal data) — genome_chrom","text":"GRanges objects containing chromosomes sizes hg38, hg19 mm10 genome assemblies.","code":""},{"path":"https://icagen.github.io/muscadet/reference/genome_chrom.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Genome chromosome sizes (internal data) — genome_chrom","text":"GRanges object containing: seqnames Chromosome name: 1 22, X Y human ; 1 19, X Y mouse (Rle). ranges Ranges chromosomes (IRanges). strand Strand information * (Rle).","code":""},{"path":"https://icagen.github.io/muscadet/reference/genome_chrom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Genome chromosome sizes (internal data) — genome_chrom","text":"Data obtained assemblies provided BSgenome package. BSgenome.Hsapiens.UCSC.hg38 version 1.4.5 - GRCh38.p14 BSgenome.Hsapiens.UCSC.hg19 version 1.4.3 - GRCh37.p13 BSgenome.Mmusculus.UCSC.mm10 version 1.4.3 - GRCm38.p6","code":""},{"path":"https://icagen.github.io/muscadet/reference/genome_chrom.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Genome chromosome sizes (internal data) — genome_chrom","text":"Pagès H (2024). BSgenome: Software infrastructure efficient representation full genomes SNPs. https://bioconductor.org/packages/BSgenome.","code":""},{"path":"https://icagen.github.io/muscadet/reference/genome_chrom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome chromosome sizes (internal data) — genome_chrom","text":"","code":"muscadet:::hg38_chrom #> GRanges object with 24 ranges and 0 metadata columns: #>        seqnames      ranges strand #>           <Rle>   <IRanges>  <Rle> #>    [1]        1 1-248956422      * #>    [2]        2 1-242193529      * #>    [3]        3 1-198295559      * #>    [4]        4 1-190214555      * #>    [5]        5 1-181538259      * #>    ...      ...         ...    ... #>   [20]       20  1-64444167      * #>   [21]       21  1-46709983      * #>   [22]       22  1-50818468      * #>   [23]        X 1-156040895      * #>   [24]        Y  1-57227415      * #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths muscadet:::hg19_chrom #> GRanges object with 24 ranges and 0 metadata columns: #>        seqnames      ranges strand #>           <Rle>   <IRanges>  <Rle> #>    [1]        1 1-249250621      * #>    [2]        2 1-243199373      * #>    [3]        3 1-198022430      * #>    [4]        4 1-191154276      * #>    [5]        5 1-180915260      * #>    ...      ...         ...    ... #>   [20]       20  1-63025520      * #>   [21]       21  1-48129895      * #>   [22]       22  1-51304566      * #>   [23]        X 1-155270560      * #>   [24]        Y  1-59373566      * #>   ------- #>   seqinfo: 24 sequences from an unspecified genome; no seqlengths muscadet:::mm10_chrom #> GRanges object with 21 ranges and 0 metadata columns: #>        seqnames      ranges strand #>           <Rle>   <IRanges>  <Rle> #>    [1]        1 1-195471971      * #>    [2]        2 1-182113224      * #>    [3]        3 1-160039680      * #>    [4]        4 1-156508116      * #>    [5]        5 1-151834684      * #>    ...      ...         ...    ... #>   [17]       17  1-94987271      * #>   [18]       18  1-90702639      * #>   [19]       19  1-61431566      * #>   [20]        X 1-171031299      * #>   [21]        Y  1-91744698      * #>   ------- #>   seqinfo: 21 sequences from an unspecified genome; no seqlengths"},{"path":"https://icagen.github.io/muscadet/reference/getLogRatioBulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve log R ratio from Bulk data on single-cell features (internal) — getLogRatioBulk","title":"Retrieve log R ratio from Bulk data on single-cell features (internal) — getLogRatioBulk","text":"internal function assigns log R ratio (LRR) values bulk data segments single-cell omic features. matches bulk data segments corresponding genomic features single-cell omic data returns table single-cell features corresponding bulk LRR values.","code":""},{"path":"https://icagen.github.io/muscadet/reference/getLogRatioBulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve log R ratio from Bulk data on single-cell features (internal) — getLogRatioBulk","text":"","code":"getLogRatioBulk(x, bulk.lrr)"},{"path":"https://icagen.github.io/muscadet/reference/getLogRatioBulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve log R ratio from Bulk data on single-cell features (internal) — getLogRatioBulk","text":"x muscomic object containing single-cell omic data, includes feature coordinates (muscomic). bulk.lrr data frame containing log R ratio per genomic segments bulk sequencing data (data.frame). One row per segment 4 columns ordered followed: chromosome (integer), start position (integer), end position (integer), Log R ratio value (numeric).","code":""},{"path":"https://icagen.github.io/muscadet/reference/getLogRatioBulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve log R ratio from Bulk data on single-cell features (internal) — getLogRatioBulk","text":"data frame single-cell omic features, columns: CHROM, start, end, bulk.lrr, bulk.lrr corresponds log R ratio values retrieved bulk data matching feature coordinates.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/getLogRatioBulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve log R ratio from Bulk data on single-cell features (internal) — getLogRatioBulk","text":"","code":"# Create a muscomic object atac <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   allele_counts = allele_counts_atac_tumor,   features = peaks ) # or use a muscomic object inside a muscadet object atac <- slot(muscadet_obj, \"omics\")[[\"ATAC\"]]  # Load bulk Log R ratio data frame data(bulk_lrr) head(bulk_lrr) #>   CHROM     start       end         lrr #> 1     1     16100  78558400 -0.17422897 #> 2     1  78558700  80533900 -0.85006857 #> 3     1  80534279  80603200 -0.17219191 #> 4     1  80603500  99964900 -0.86685361 #> 5     1  99965200 122514900 -0.15990417 #> 6     1 122520400 124588600  0.05119736 # or use the one inside a muscadet object head(slot(muscadet_obj, \"bulk.data\")[[\"log.ratio\"]]) #>   CHROM     start       end         lrr #> 1     1     16100  78558400 -0.17422897 #> 2     1  78558700  80533900 -0.85006857 #> 3     1  80534279  80603200 -0.17219191 #> 4     1  80603500  99964900 -0.86685361 #> 5     1  99965200 122514900 -0.15990417 #> 6     1 122520400 124588600  0.05119736  features_bulk_lrr <- getLogRatioBulk(   x = atac,   bulk.lrr = bulk_lrr # or slot(muscadet_obj, \"bulk.data\")[[\"log.ratio\"]] ) head(features_bulk_lrr) #>   CHROM     start       end   bulk.lrr #> 1     1 102000001 112000000 -0.1599042 #> 2     1 104000001 114000000 -0.1599042 #> 3     1 106000001 116000000 -0.1599042 #> 4     1 108000001 118000000 -0.1599042 #> 5     1 110000001 120000000 -0.1599042 #> 6     1 228000001 238000000 -0.1641702"},{"path":"https://icagen.github.io/muscadet/reference/getSegConsensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Get consensus segments across clusters — getSegConsensus","title":"Get consensus segments across clusters — getSegConsensus","text":"function processes segments data, clusters different segment breakpoints, identify consensus segments across clusters. groups breakpoints within specified genomic distance (dist.breakpoints) calculates representative breakpoints group based cluster size median coordinates.","code":""},{"path":"https://icagen.github.io/muscadet/reference/getSegConsensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get consensus segments across clusters — getSegConsensus","text":"","code":"getSegConsensus(x, ncells, dist.breakpoints = 1e+06)"},{"path":"https://icagen.github.io/muscadet/reference/getSegConsensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get consensus segments across clusters — getSegConsensus","text":"x data frame containing cluster segments information following required columns: chrom: Chromosome name (factor character). start: Start position segment (numeric). end: End position segment (numeric). cluster: Cluster identifier (numeric). ncells named vector specifying number cells per cluster (numeric vector). names must match cluster identifiers cluster column x. dist.breakpoints numeric value specifying minimum genomic distance adjacent breakpoints grouped consensus segment (numeric value). Default: 1e6.","code":""},{"path":"https://icagen.github.io/muscadet/reference/getSegConsensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get consensus segments across clusters — getSegConsensus","text":"data frame containing consensus segments following columns: chrom: Chromosome name. start: Start position consensus segment. end: End position consensus segment.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/getSegConsensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get consensus segments across clusters — getSegConsensus","text":"","code":"# Example data frame segs <- data.frame(   chrom = c(\"chr1\", \"chr1\", \"chr2\", \"chr2\"),   start = c(1.2e6, 1.1e6, 3.1e6, 3.2e6),   end = c(2.5e6, 2.6e6, 5.5e6, 5.7e6),   cluster = c(\"1\", \"2\", \"1\", \"2\") )  # Generate consensus segments consensus_segs <- getSegConsensus(segs,                                   ncells = c(\"1\" = 50, \"2\" = 30),                                   dist.breakpoints = 1e6) print(consensus_segs) #>   chrom   start     end #> 1  chr1 1200000 2500000 #> 2  chr2 3100000 5500000"},{"path":"https://icagen.github.io/muscadet/reference/heatmapMuscadet.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap plot for muscadet object — heatmapMuscadet","title":"Heatmap plot for muscadet object — heatmapMuscadet","text":"function generates heatmap visualize log R ratio (LRR) data contained muscadet objects. One heatmap generated per omic, rows cells columns chromosomes, muscadet object containing multiple omics, heatmaps plotted horizontally aligned. cells can clustered specific clustering partition following clustering step muscadet object, custom cluster assignments can used. Additionally, LRR values bulk sequencing data can plotted annotation heatmaps.","code":""},{"path":"https://icagen.github.io/muscadet/reference/heatmapMuscadet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap plot for muscadet object — heatmapMuscadet","text":"","code":"heatmapMuscadet(   x,   filename = NULL,   partition = NULL,   clusters = NULL,   add_bulk_lrr = TRUE,   show_missing = TRUE,   averages = FALSE,   title = \"\",   row_annots = NULL,   white_scale = c(0.3, 0.7),   colors = NULL,   png_res = 300,   quiet = FALSE )"},{"path":"https://icagen.github.io/muscadet/reference/heatmapMuscadet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap plot for muscadet object — heatmapMuscadet","text":"x muscadet object containing LRR data omics (computeLogRatio()) clustering data (clusterMuscadet()) (muscadet). filename (Optional) Character string specifying file path save heatmap image PNG (ends .png), PDF (ends .pdf) SVG (ends .svg) format (character string). partition (Optional) Value specifying clustering partition plot (numeric character). either resolution number cluster (k) used clustering depending clustering method (res_range k_range clusterMuscadet()). partition clusters arguments NULL (default), assigned clusters CNA calling (x@cnacalling$cluster) used available x (see assignClusters()). clusters (Optional) custom named vector cluster assignments (integer named vector). Names must corresponds cell names within muscadet object x. contains less cells muscadet object x, missing cells filtered displayed heatmap. show_missing = FALSE provided cells data omics displayed. partition clusters arguments NULL (default), assigned clusters CNA calling (x@cnacalling$cluster) used available x (see assignClusters()). add_bulk_lrr Logical. TRUE (default), adds bulk log R ratio (LRR) data annotation available muscadet object. show_missing Logical. TRUE (default), missing cells (.e., cells missing data least one omic) displayed heatmaps. averages Logical. TRUE, plots average log R ratio per cluster. Default FALSE. title Character string title plot (character string). Default empty character string. row_annots Optional. list HeatmapAnnotation objects ComplexHeatmap-package package, specifying row annotations add left part heatmap. element list must class HeatmapAnnotation, must row annotation (using rowAnnotation() HeatmapAnnotation() = 'row'), must unique name (name argument rowAnnotation() HeatmapAnnotation()). averages = FALSE, annotations must concern cells, averages = TRUE must concern clusters. Default NULL, row annotations added. white_scale Numeric vector length 2 list numeric vectors (numeric vector list). numeric vector length 2, white color boundaries applied omics muscadet object. E.g. c(0.3, 0.7) (default). list (named omics name), must length number omics muscadet object, vector element applies white color boundaries specific omic. E.g. list(c(0.3, 0.7), c(0.4, 0.6)) uses 0.3 0.7 quantiles LRR ref data 1st omic heatmap, 0.4 0.6 quantiles second. Values vectors must 0 1, specifying quantiles LRR reference data define boundaries white color heatmap. LRR values falling within range considered close majority LRR reference data, indicating significant gain loss coverage, represented white heatmap. Default c(0.3, 0.7). colors Vector colors cluster annotation (character vector). NULL (default), uses predefined colors. png_res Resolution ppi grDevices::png() filename ends .png extension (numeric). Default 300. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/heatmapMuscadet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap plot for muscadet object — heatmapMuscadet","text":"list containing: plot: gTree object created grid::grid.grab() (gTree). width: Width heatmap plot mm (unit). height: Height heatmap plot mm (unit). filename argument provided, heatmap directly saved PNG image provided path.","code":""},{"path":"https://icagen.github.io/muscadet/reference/heatmapMuscadet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap plot for muscadet object — heatmapMuscadet","text":"","code":"if (FALSE) { # \\dontrun{ # Load example muscadet object # data(\"muscadet_obj\")   # --- Method \"seurat\" ---  print(muscadet_obj$clustering$params$method)  # Perform clustering if not already done # muscadet_obj <- clusterMuscadet( #     x = muscadet_obj, #     method = \"seurat\", #     res_range = c(0.6, 0.8), #     dims_list = list(1:10, 1:10), #     knn_seurat = 10, # adapted for low number of cells in example data #     knn_range_seurat = 30 # adapted for low number of cells in example data # )  # Plot a single partition heatmapMuscadet(muscadet_obj,                 filename = file.path(\"heatmap_res0.6.png\"),                 partition = 0.6,                 show_missing = FALSE) # only displaying cells without missing data  ht <- heatmapMuscadet(muscadet_obj, partition = 0.6) pdf(     file = file.path(\"heatmap_res0.6.pdf\"),     width = ht$width * 0.0393701, # convert to inches     height = ht$height * 0.0393701, # convert to inches ) grid.draw(ht$plot) dev.off()   # Loop over partitions for (p in names(muscadet_obj$clustering$clusters)) {     filename <- paste0(\"heatmap_res\", p, \".png\")     title <- paste(         \"Example |\",         paste0(\"method=\", muscadet_obj$clustering$params[[\"method\"]]), \"|\",         paste0(\"omics=\", paste0(muscadet_obj$clustering$params[[\"omics\"]], collapse = \",\")), \"|\",         paste0(\"dims=\", \"1:10,1:10\"), \"|\",         paste0(\"res=\", p)     )     heatmapMuscadet(muscadet_obj, filename, partition = p, title = title) }  # --- Plot Averages per Clusters ---  heatmapMuscadet(muscadet_obj,                 filename = file.path(\"heatmap_res0.6_averages.png\"),                 partition = 0.6,                 averages = TRUE,                 add_bulk_lrr = FALSE)  # --- Add Row Annotation ---  library(\"ComplexHeatmap\")  # Define example cell annotation muscadet_cells <- Reduce(union, SeuratObject::Cells(muscadet_obj)) cells_origin <- setNames(c(     rep(\"sample1\", ceiling(length(muscadet_cells) / 2)),     rep(\"sample2\", floor(length(muscadet_cells) / 2))     ),     muscadet_cells ) cells_origin <- cells_origin[sort(names(cells_origin))] # IMPORTANT: annotation names (cells) must be sorted to match heatmap # matrices (column names of log ratio matrix are sorted in heatmapMuscadet())  # Create row annotation ha <- rowAnnotation(     annot = anno_simple(         cells_origin[sort(names(cells_origin))],         col = c(\"sample1\" = \"cadetblue3\", \"sample2\" = \"orchid3\")),     name = \"origin\", # unique name     annotation_label = \"origin\", # label displayed on heatmap     annotation_name_gp = gpar(fontsize = 10) # change font size )  # Plot heatmap with supplementary row annotation heatmapMuscadet(muscadet_obj,                 filename = file.path(\"heatmap_res0.6_annot.png\"),                 partition = 0.6,                 row_annots = list(ha))  # --- Add Row Annotation for averages ---  library(\"ComplexHeatmap\")  # Define example cluster annotation clus <- setNames(c(\"annot1\", \"annot2\"), c(1, 2)) # 2 clusters for partition 0.6 clus <- clus[order(names(clus))] # IMPORTANT: annotation names (clusters) must be sorted to match heatmap # matrices (column names of log ratio averages matrix are sorted in heatmapMuscadet())   # Create row annotation ha2 <- rowAnnotation(     annot = anno_simple(clus, col = c(\"annot1\" = \"tomato\", \"annot2\" = \"gold2\")),     name = \"annot\", # unique name     annotation_label = \"annot\", # label displayed on heatmap     annotation_name_gp = gpar(fontsize = 10) # change font size ) heatmapMuscadet(muscadet_obj,                 averages = TRUE,                 filename = file.path(\"heatmap_res0.6_annot_averages.png\"),                 partition = 0.6,                 row_annots = list(ha2))   # --- Method \"hclust\" ---  # Perform clustering if not already done muscadet_obj2 <- clusterMuscadet(     x = muscadet_obj,     method = \"hclust\",     k_range = 3:5,     dist_method = \"euclidean\",     hclust_method = \"ward.D\" )  print(muscadet_obj2$clustering$params$method)  # Plot a single partition heatmapMuscadet(muscadet_obj2,                 filename = file.path(\"heatmap_k3.png\"),                 partition = 3,                 show_missing = FALSE)  # Loop over partitions for (p in names(muscadet_obj2$clustering$clusters)) {      filename <- paste0(\"heatmap_k\", p, \".png\")     title <- paste(         \"Example |\",         paste0(\"method=\", muscadet_obj2$clustering$params[[\"method\"]]), \"|\",         muscadet_obj2$clustering$params[[\"dist_method\"]],         muscadet_obj2$clustering$params[[\"hclust_method\"]], \"|\",         paste0(\"weights=\",                paste0(muscadet_obj2$clustering$params[[\"weights\"]], collapse = \",\")),         \"|\",         paste0(\"k=\", p)     )      heatmapMuscadet(muscadet_obj2, filename, partition = p, title = title) } } # }"},{"path":"https://icagen.github.io/muscadet/reference/heatmapStep.html","id":null,"dir":"Reference","previous_headings":"","what":"Create heatmap and distribution plots of the different steps of computing log R ratios — heatmapStep","title":"Create heatmap and distribution plots of the different steps of computing log R ratios — heatmapStep","text":"function generates heatmap distribution plots tumor reference cells step computing log R ratios matrices. input object corresponds output computeLogRatioATAC() computeLogRatioRNA() argument all_steps = TRUE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/heatmapStep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create heatmap and distribution plots of the different steps of computing log R ratios — heatmapStep","text":"","code":"heatmapStep(   obj,   step,   filename,   title = NULL,   col_quantiles = c(0.1, 0.4, 0.6, 0.9),   col_breaks = NULL,   colors = c(\"#00008E\", \"white\", \"white\", \"#630000\") )"},{"path":"https://icagen.github.io/muscadet/reference/heatmapStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create heatmap and distribution plots of the different steps of computing log R ratios — heatmapStep","text":"obj list provided output computeLogRatioATAC() computeLogRatioRNA() functions argument all_steps = TRUE. includes tumor reference matrices step computing log R ratio matrices. step step within obj list use plotting (character string). must match one names obj. filename File path save output plot (character string). file format inferred extension (\".png\", \".pdf\" \".svg\"). title Title plot (character string). NULL, title automatically generated using provided step argument corresponding value name (obj[[step]]$name). col_quantiles numeric vector length 4, specifying quantiles use color breakpoints heatmap (numeric). Either col_quantiles col_breaks must provided, provided col_breaks used. Default c(0.1, 0.4, 0.6, 0.9). col_breaks numeric vector length 4, specifying custom breakpoints color scale heatmap (numeric). Either col_quantiles col_breaks must provided, provided col_breaks used. Default NULL. colors character vector 4 colors used color scale heatmap (character vector). Default c(\"#00008E\", \"white\", \"white\", \"#630000\").","code":""},{"path":"https://icagen.github.io/muscadet/reference/heatmapStep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create heatmap and distribution plots of the different steps of computing log R ratios — heatmapStep","text":"function return value saves heatmaps-histograms plot specified file.","code":""},{"path":"https://icagen.github.io/muscadet/reference/heatmapStep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create heatmap and distribution plots of the different steps of computing log R ratios — heatmapStep","text":"","code":"if (FALSE) { # \\dontrun{ # Create muscomic objects atac <- CreateMuscomicObject(     type = \"ATAC\",     mat_counts = mat_counts_atac_tumor,     allele_counts = allele_counts_atac_tumor,     features = peaks ) rna <- CreateMuscomicObject(     type = \"RNA\",     mat_counts = mat_counts_rna_tumor,     allele_counts = allele_counts_rna_tumor,     features = genes ) atac_ref <- CreateMuscomicObject(     type = \"ATAC\",     mat_counts = mat_counts_atac_ref,     allele_counts = allele_counts_atac_ref,     features = peaks ) rna_ref <- CreateMuscomicObject(     type = \"RNA\",     mat_counts = mat_counts_rna_ref,     allele_counts = allele_counts_rna_ref,     features = genes )  # Create muscadet objects muscadet <- CreateMuscadetObject(     omics = list(atac, rna),     bulk.lrr = bulk_lrr,     bulk.label = \"WGS\",     genome = \"hg38\" ) muscadet_ref <- CreateMuscadetObject(     omics = list(atac_ref, rna_ref),     genome = \"hg38\" )  # Compute log R ratios with `all_steps = TRUE` obj_atac_all <- computeLogRatioATAC(     matTumor = matCounts(muscadet)$ATAC,     matRef = matCounts(muscadet_ref)$ATAC,     peaksCoord = coordFeatures(muscadet)$ATAC,     genome = slot(muscadet, \"genome\"),     minReads = 1, # low value for example subsampled datasets     minPeaks = 1, # low value for example subsampled datasets     all_steps = TRUE ) names(obj_atac_all)  # Plot heatmap and distribution of values for Step01 heatmapStep(obj = obj_atac_all,             step = \"step01\",             filename = file.path(tempdir(), \"step01.png\"),             title = \"Example data - Step 01\")  # Plot heatmap and distribution of values for all steps for (step in grep(\"step\", names(obj_atac_all), value = TRUE)) {     heatmapStep(         obj_atac_all,         step,         filename = file.path(tempdir(), paste0(\"ATAC_\", step, \".pdf\")),         title = paste(\"ATAC -\", step)     ) } } # }"},{"path":"https://icagen.github.io/muscadet/reference/imputeClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute cluster assignments for missing cells by similarity — imputeClusters","title":"Impute cluster assignments for missing cells by similarity — imputeClusters","text":"function imputes cluster assignments cells missing omics leveraging nearest neighbor cells omic matrices.","code":""},{"path":"https://icagen.github.io/muscadet/reference/imputeClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute cluster assignments for missing cells by similarity — imputeClusters","text":"","code":"imputeClusters(mat_list, clusters, knn_imp = 10)"},{"path":"https://icagen.github.io/muscadet/reference/imputeClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute cluster assignments for missing cells by similarity — imputeClusters","text":"mat_list named list log ratio cells x features matrices matrix corresponds single omic dataset (list). Rows cells, columns features. clusters named vector cluster assignments cells (numeric character vector). vector names must correspond names common cells across omics (matching row names mat_list). clusters names can integer, numeric character values. knn_imp Integer specifying number nearest neighbors cells use imputation (integer). Must positive integer. Default 10.","code":""},{"path":"https://icagen.github.io/muscadet/reference/imputeClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute cluster assignments for missing cells by similarity — imputeClusters","text":"named vector combining original clusters assignments common cells across omics (given clusters argument) imputed cluster assignments cells missing least one omic matrix.","code":""},{"path":"https://icagen.github.io/muscadet/reference/imputeClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute cluster assignments for missing cells by similarity — imputeClusters","text":"function operates following steps: Identifies cells missing specific matrices. Finds k-nearest neighbors missing cells matrices present. Imputes cluster assignments missing cells based clusters assigned neighbors. Resolves ties (two major clusters found among neighbors) selecting one first nearest neighbor. imputation performed separately omic dataset, results aggregated provide final cluster assignments.","code":""},{"path":"https://icagen.github.io/muscadet/reference/imputeClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute cluster assignments for missing cells by similarity — imputeClusters","text":"","code":"# Create matrices with some cells missing in one or the other set.seed(42) mat1 <- matrix(runif(100), nrow = 20) mat2 <- matrix(runif(100), nrow = 20) rownames(mat1) <- paste0(\"Cell\", 1:20) rownames(mat2) <- paste0(\"Cell\", c(1:5, 11:25)) mat_list <- list(ATAC = mat1, RNA = mat2)  # Create cluster assignments for common cells common_cells <- intersect(rownames(mat1), rownames(mat2)) clusters <- setNames(sample(1:4, length(common_cells), replace = TRUE), common_cells)  # Check the inputs print(common_cells) #>  [1] \"Cell1\"  \"Cell2\"  \"Cell3\"  \"Cell4\"  \"Cell5\"  \"Cell11\" \"Cell12\" \"Cell13\" #>  [9] \"Cell14\" \"Cell15\" \"Cell16\" \"Cell17\" \"Cell18\" \"Cell19\" \"Cell20\" print(rownames(mat_list$ATAC)) #>  [1] \"Cell1\"  \"Cell2\"  \"Cell3\"  \"Cell4\"  \"Cell5\"  \"Cell6\"  \"Cell7\"  \"Cell8\"  #>  [9] \"Cell9\"  \"Cell10\" \"Cell11\" \"Cell12\" \"Cell13\" \"Cell14\" \"Cell15\" \"Cell16\" #> [17] \"Cell17\" \"Cell18\" \"Cell19\" \"Cell20\" print(rownames(mat_list$RNA)) #>  [1] \"Cell1\"  \"Cell2\"  \"Cell3\"  \"Cell4\"  \"Cell5\"  \"Cell11\" \"Cell12\" \"Cell13\" #>  [9] \"Cell14\" \"Cell15\" \"Cell16\" \"Cell17\" \"Cell18\" \"Cell19\" \"Cell20\" \"Cell21\" #> [17] \"Cell22\" \"Cell23\" \"Cell24\" \"Cell25\"  # Impute cluster assignments for missing cells imputed_clusters <- imputeClusters(mat_list, clusters, knn_imp = 3)  # View the imputed cluster assignments print(imputed_clusters) #>  Cell1  Cell2  Cell3  Cell4  Cell5 Cell11 Cell12 Cell13 Cell14 Cell15 Cell16  #>      4      2      1      4      3      1      2      2      2      4      2  #> Cell17 Cell18 Cell19 Cell20 Cell10  Cell6  Cell7  Cell8  Cell9 Cell21 Cell22  #>      3      4      3      2      2      2      2      1      2      4      1  #> Cell23 Cell24 Cell25  #>      2      2      3"},{"path":"https://icagen.github.io/muscadet/reference/mat_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data: Matrices of raw counts — mat_counts","title":"Example data: Matrices of raw counts — mat_counts","text":"Matrices raw read counts features x cells dgCMatrix format.","code":""},{"path":"https://icagen.github.io/muscadet/reference/mat_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data: Matrices of raw counts — mat_counts","text":"","code":"mat_counts_atac_tumor  mat_counts_atac_ref  mat_counts_rna_tumor  mat_counts_rna_ref"},{"path":"https://icagen.github.io/muscadet/reference/mat_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data: Matrices of raw counts — mat_counts","text":"dgCMatrix (dgCMatrix-class) numeric values following dimensions: rows Features (peaks, genes). columns Cell barcodes.","code":""},{"path":"https://icagen.github.io/muscadet/reference/mergeCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge counts for muscadet objects — mergeCounts","title":"Merge counts for muscadet objects — mergeCounts","text":"function combines allelic (counts variant positions, either common SNPs individual-specific heterozygous positions) coverage counts (counts features) omics per cluster sample reference. resulting merged data stored cnacalling slot sample muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/mergeCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge counts for muscadet objects — mergeCounts","text":"","code":"mergeCounts(x, reference, nor.het = TRUE, quiet = FALSE)"},{"path":"https://icagen.github.io/muscadet/reference/mergeCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge counts for muscadet objects — mergeCounts","text":"x muscadet object containing sample data (muscadet). object must include clustering assignments cnacalling$clusters slot. reference muscadet object containing reference data (muscadet). .het logical value specify normal reference allele counts modified : total normal depth counts divided 2, force positions heterozygous normal reference allelic data (e.g. heterozygous positions retrieve based matched bulk sequencing data, thereby assumed heterozygous) combining coverage allelic data. Default TRUE. quiet Logical. TRUE, suppresses informative messages execution. Default FALSE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/mergeCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge counts for muscadet objects — mergeCounts","text":"modified muscadet object corresponding x muscadet object, updated cnacalling slot containing: allelic.counts: Processed allelic counts variant positions, omics. coverage.counts: Processed coverage counts merged reference. combined.counts: Combined data allelic coverage counts. Abbreviations: RD = Reference allele read depth AD = Alternative allele read depth DP = Total read depth TUM = tumor sample = normal reference omic = omic specific (omic column) = omics","code":""},{"path":"https://icagen.github.io/muscadet/reference/mergeCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge counts for muscadet objects — mergeCounts","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\") # data(\"muscadet_obj_ref\")  # Merge counts from all omics from both sample and reference muscadet_obj <- mergeCounts(muscadet_obj, muscadet_obj_ref) #> Allelic data processing... #> Coverage data processing... #> Combining allelic and coverage data..."},{"path":"https://icagen.github.io/muscadet/reference/musc-access.html","id":null,"dir":"Reference","previous_headings":"","what":"Access and assignment methods for muscadet objects — [.muscadet","title":"Access and assignment methods for muscadet objects — [.muscadet","text":"Simplified access omic datasets slots inside muscadet objects. Assign new data muscadet muscomic object. muscadet objects, omic datasets omics slot can directly reassigned.","code":""},{"path":"https://icagen.github.io/muscadet/reference/musc-access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access and assignment methods for muscadet objects — [.muscadet","text":"","code":"# S3 method for class 'muscadet' x[i, ...]  # S3 method for class 'muscomic' x[i, ...]  # S3 method for class 'muscadet' x$name  # S3 method for class 'muscomic' x$name  # S3 method for class 'muscadet' x[i] <- value  # S3 method for class 'muscomic' x[i] <- value  # S3 method for class 'muscadet' x$i <- value  # S3 method for class 'muscomic' x$i <- value"},{"path":"https://icagen.github.io/muscadet/reference/musc-access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access and assignment methods for muscadet objects — [.muscadet","text":"x muscadet muscomic object. name slot (omic). ... arguments (ignored). name name slot (omic). value new value assign.","code":""},{"path":"https://icagen.github.io/muscadet/reference/musc-access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access and assignment methods for muscadet objects — [.muscadet","text":"selected slot omic dataset (muscomic object) muscadet objects. selected slot muscomic objects. updated muscadet muscomic object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/musc-access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access and assignment methods for muscadet objects — [.muscadet","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\")  # Access to muscadet omics or slots muscadet_obj[\"ATAC\"] #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  log.ratio coverage data matrix  #>  112 cells  #>  133 features: windows of peaks  #>  691 variant positions  muscadet_obj[\"genome\"] #> [1] \"hg38\"  # Load example muscadet object # data(\"muscadet_obj\")  # Access to muscomic slots muscadet_obj[\"ATAC\"][\"label.omic\"] #> [1] \"scATAC-seq\"  # Load example muscadet object # data(\"muscadet_obj\")  # Access to muscadet omics or slots muscadet_obj$ATAC #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  log.ratio coverage data matrix  #>  112 cells  #>  133 features: windows of peaks  #>  691 variant positions  muscadet_obj$genome #> [1] \"hg38\"  # Load example muscadet object # data(\"muscadet_obj\")  # Access to muscomic slots muscadet_obj$ATAC$label.omic #> [1] \"scATAC-seq\"  # Load example muscadet object # data(\"muscadet_obj\")  # Assign new data in muscadet object muscadet_obj[\"genome\"] <- \"hg38\"  # Load example muscadet object # data(\"muscadet_obj\")  # Assign new data in muscomic object muscadet_obj[\"ATAC\"][\"label.omic\"] <- \"scATAC-seq\"  # Load example muscadet object # data(\"muscadet_obj\")  # Assign new data in muscadet object muscadet_obj$genome <- \"hg38\"  # Load example muscadet object # data(\"muscadet_obj\")  # Assign new data in muscomic object muscadet_obj$ATAC$label.omic <- \"scATAC-seq\""},{"path":"https://icagen.github.io/muscadet/reference/musc-auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Autocompletion for $ access on muscadet or muscomic objects — .DollarNames.muscadet","title":"Autocompletion for $ access on muscadet or muscomic objects — .DollarNames.muscadet","text":"Enable autocompletion $ access muscadet muscomic objects. muscadet objects, also lists omic datasets contained inside omics slot.","code":""},{"path":"https://icagen.github.io/muscadet/reference/musc-auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autocompletion for $ access on muscadet or muscomic objects — .DollarNames.muscadet","text":"","code":"# S3 method for class 'muscadet' .DollarNames(x, pattern = \"\")  # S3 method for class 'muscomic' .DollarNames(x, pattern = \"\")"},{"path":"https://icagen.github.io/muscadet/reference/musc-auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autocompletion for $ access on muscadet or muscomic objects — .DollarNames.muscadet","text":"x muscadet muscomic object. pattern regular expression.  matching names     returned.","code":""},{"path":"https://icagen.github.io/muscadet/reference/musc-auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autocompletion for $ access on muscadet or muscomic objects — .DollarNames.muscadet","text":"Character vector matching element names.","code":""},{"path":"https://icagen.github.io/muscadet/reference/musc-auto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autocompletion for $ access on muscadet or muscomic objects — .DollarNames.muscadet","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\") muscadet_obj$ATAC #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  log.ratio coverage data matrix  #>  112 cells  #>  133 features: windows of peaks  #>  691 variant positions   # Load example muscadet object # data(\"muscadet_obj\") muscadet_obj$ATAC$type #> [1] \"ATAC\""},{"path":"https://icagen.github.io/muscadet/reference/muscadet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The muscadet class — muscadet-class","title":"The muscadet class — muscadet-class","text":"muscadet object encapsulates data different single-cell omics muscomic objects well downstream analysis results clustering CNA calling.","code":""},{"path":"https://icagen.github.io/muscadet/reference/muscadet-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The muscadet class — muscadet-class","text":"omics List muscomic objects, one per single-cell omic (list). bulk.data List objects containing data paired bulk sequencing (list). clustering List objects containing data associated clustering cells based coverage log R ratio values (list). cnacalling List objects containing data associated calling copy number alterations (CNAs) (list). genome Reference genome name among: \"hg38\", \"hg19\" \"mm10\" (character).","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/muscadet-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The muscadet class — muscadet-class","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\")  muscadet_obj #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: log.ratio, log.ratio  #>  cells: 112, 119 (common: 84, total: 147)  #>  features: 133, 349  #>  feature labels: windows of peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: WGS  #>  clustering: partitions = 0.6, 0.8, 1 ; optimal partition = 1  #>  CNA calling: 2 clusters ; 47 consensus segments including 1 CNA segments  #>  genome: hg38   str(muscadet_obj, max.level = 2) #> Formal class 'muscadet' [package \"muscadet\"] with 5 slots #>   ..@ omics     :List of 2 #>   ..@ bulk.data :List of 2 #>   ..@ clustering:List of 9 #>   ..@ cnacalling:List of 21 #>   ..@ genome    : chr \"hg38\""},{"path":"https://icagen.github.io/muscadet/reference/muscadet-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for muscomic and muscadet objects — muscadet-methods","title":"Methods for muscomic and muscadet objects — muscadet-methods","text":"Methods facilitate access data within muscomic muscadet objects. Cells(): Get cell identifiers (addition methods muscomic muscadet SeuratObject::Cells()). Features(): Get feature identifiers (addition methods muscomic muscadet SeuratObject::Features()). coordFeatures(): Get coordinates features data frames. matCounts(): Get raw count matrices. matLogRatio(): Get log R ratio matrices.","code":""},{"path":"https://icagen.github.io/muscadet/reference/muscadet-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for muscomic and muscadet objects — muscadet-methods","text":"","code":"coordFeatures(x)  matCounts(x)  matLogRatio(x)  # S3 method for class 'muscomic' Cells(x, ...)  # S3 method for class 'muscadet' Cells(x, ...)  # S3 method for class 'muscomic' Features(x, ...)  # S3 method for class 'muscadet' Features(x, ...)  # S4 method for class 'muscomic' coordFeatures(x)  # S4 method for class 'muscadet' coordFeatures(x)  # S4 method for class 'muscomic' matCounts(x)  # S4 method for class 'muscadet' matCounts(x)  # S4 method for class 'muscomic' matLogRatio(x)  # S4 method for class 'muscadet' matLogRatio(x)"},{"path":"https://icagen.github.io/muscadet/reference/muscadet-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for muscomic and muscadet objects — muscadet-methods","text":"x muscomic muscadet object. ... arguments (ignored).","code":""},{"path":"https://icagen.github.io/muscadet/reference/muscadet-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for muscomic and muscadet objects — muscadet-methods","text":"Cells: x muscomic object: vector cell names. x muscadet object: list vectors cell names, one list element per omic. Features: x muscomic object: vector feature names. x muscadet object: list vectors feature names, one list element per omic. coordFeatures: x muscomic object: data frame feature coordinates. x muscadet object: list data frames feature coordinates, one list element per omic. matCounts: x muscomic object: dgCMatrix-class features x cells. x muscadet object: list dgCMatrix-class features x cells, one list element per omic. matLogRatio: x muscomic object: matrix features x cells. x muscadet object: list matrix features x cells, one list element per omic.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/muscadet-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for muscomic and muscadet objects — muscadet-methods","text":"","code":"library(\"SeuratObject\") #> Loading required package: sp #> ‘SeuratObject’ was built under R 4.5.0 but the current version is #> 4.5.1; it is recomended that you reinstall ‘SeuratObject’ as the ABI #> for R may have changed #>  #> Attaching package: ‘SeuratObject’ #> The following objects are masked from ‘package:base’: #>  #>     intersect, t  # Load example muscadet object # data(\"muscadet_obj\")  Cells(muscadet_obj) # list of 2 cell names vectors for the 2 omics #> $ATAC #>   [1] \"samplename_AACAAAGGTCATGCAA-1\" \"samplename_AACGGTAAGGATAAAC-1\" #>   [3] \"samplename_AAGCATGAGGGACGCA-1\" \"samplename_AAGCTCCCAACCCTCC-1\" #>   [5] \"samplename_AATGTCATCATGCAAC-1\" \"samplename_AATTAGCGTAAAGCGG-1\" #>   [7] \"samplename_ACACGGACAGCTCATA-1\" \"samplename_ACCAATATCCTCATGC-1\" #>   [9] \"samplename_ACCTAAATCCAGCACA-1\" \"samplename_ACTATGTCAGTAGGTG-1\" #>  [11] \"samplename_ACTTACAAGTAAGGGC-1\" \"samplename_AGAAACTAGGTCAAAG-1\" #>  [13] \"samplename_AGAAGGTGTAGTAAGA-1\" \"samplename_AGACCCGGTAACCACA-1\" #>  [15] \"samplename_AGCATCCCACCTCACC-1\" \"samplename_AGCTTAATCGCAAACT-1\" #>  [17] \"samplename_AGGATATAGTTAGTGC-1\" \"samplename_AGTTACATCCGGTTAG-1\" #>  [19] \"samplename_ATATGTCCACCTCACC-1\" \"samplename_ATGACCAGTCACCAAA-1\" #>  [21] \"samplename_ATGACTCAGGGCCACT-1\" \"samplename_ATGGTTATCCAAATCA-1\" #>  [23] \"samplename_ATGTTGTCATTGTGCA-1\" \"samplename_ATGTTTGAGCTTAGTA-1\" #>  [25] \"samplename_ATTTGCGCAATACTGT-1\" \"samplename_CAACTAGGTGTTTGAG-1\" #>  [27] \"samplename_CAGATTCAGCATGTCG-1\" \"samplename_CAGCATGTCGGTTCCT-1\" #>  [29] \"samplename_CATGCAAGTTGAGCCG-1\" \"samplename_CATTTGTTCAATGACC-1\" #>  [31] \"samplename_CCAGTTTGTAATCACG-1\" \"samplename_CCCTCATAGGACAATG-1\" #>  [33] \"samplename_CCGCTAAAGGCATGTT-1\" \"samplename_CCGTTGCGTGTGTCCC-1\" #>  [35] \"samplename_CCTGGATCATTCCTCG-1\" \"samplename_CCTTCAATCCGCCAAA-1\" #>  [37] \"samplename_CGCCTCATCGATTATG-1\" \"samplename_CGCTACTTCCCTCAGT-1\" #>  [39] \"samplename_CGCTATGAGTGACCTG-1\" \"samplename_CGGATAAAGGCATTGT-1\" #>  [41] \"samplename_CGGATTAGTCATGAGC-1\" \"samplename_CGGTGAGAGCTTGCTC-1\" #>  [43] \"samplename_CGGTTTCTCAATTACG-1\" \"samplename_CGTAATGGTCACCTAT-1\" #>  [45] \"samplename_CGTGCACAGGTAGCTT-1\" \"samplename_CGTGTGTCAAGGATTA-1\" #>  [47] \"samplename_CTAGCTTGTTAATGCG-1\" \"samplename_CTAGTGAGTTAACGAT-1\" #>  [49] \"samplename_CTATGTTTCTTGGATA-1\" \"samplename_CTCACACTCCCATAAA-1\" #>  [51] \"samplename_CTCACTCAGCGGATAA-1\" \"samplename_CTCCGGACAATGCGCT-1\" #>  [53] \"samplename_CTTCAAGCACTAGGTC-1\" \"samplename_GAAAGGCTCTAAGTGC-1\" #>  [55] \"samplename_GAAGGAACACTCGCTC-1\" \"samplename_GAGCAAGGTGGTTCTT-1\" #>  [57] \"samplename_GAGGTACAGCAAGGTA-1\" \"samplename_GAGGTTAAGGACCTTG-1\" #>  [59] \"samplename_GATCAGGCAACTAGCC-1\" \"samplename_GATTGCGTCCTCACTA-1\" #>  [61] \"samplename_GCAAGTGCAGGACCTT-1\" \"samplename_GCAATCTAGCTCCTTA-1\" #>  [63] \"samplename_GCAGGAAGTGCATCGG-1\" \"samplename_GCAGGTTGTTATTGCC-1\" #>  [65] \"samplename_GCCAGGTTCACAGGAA-1\" \"samplename_GCTGCAATCCGTAAAC-1\" #>  [67] \"samplename_GCTGTAAGTTAAGGCC-1\" \"samplename_GCTTAGTAGTAATCCA-1\" #>  [69] \"samplename_GGAGGTTAGGCTAATC-1\" \"samplename_GGCGGTAAGAACAAGT-1\" #>  [71] \"samplename_GGGCTAACAGCCAGAA-1\" \"samplename_GGTACTAGTGTGAGGA-1\" #>  [73] \"samplename_GGTCAAGCATGAGCAG-1\" \"samplename_GGTGAGCCAGCTCATA-1\" #>  [75] \"samplename_GGTTAATGTATTCGTC-1\" \"samplename_GGTTAGCGTCAGGCAT-1\" #>  [77] \"samplename_GGTTATGGTGTTTCAC-1\" \"samplename_GGTTGCTCAGGTTATT-1\" #>  [79] \"samplename_GTACTTCGTTGTGACA-1\" \"samplename_GTAGCGCTCCTTTACG-1\" #>  [81] \"samplename_GTCTAGCCAGGATGGC-1\" \"samplename_GTGTGCGGTTACCGGG-1\" #>  [83] \"samplename_GTTAAGTGTAGGTGTC-1\" \"samplename_GTTAGACTCACACAGT-1\" #>  [85] \"samplename_GTTGCCCGTTAGGATT-1\" \"samplename_GTTTAACCACCTGTAA-1\" #>  [87] \"samplename_TAATGCATCGATCAGT-1\" \"samplename_TACATCAAGGCTAATC-1\" #>  [89] \"samplename_TACGGTTAGTTTGTCT-1\" \"samplename_TATATCCTCCGCACAA-1\" #>  [91] \"samplename_TATTAGCCAGGCTAAG-1\" \"samplename_TATTGACCAGCGCTTG-1\" #>  [93] \"samplename_TCAGCCTTCACCTGCT-1\" \"samplename_TCAGCGATCTTTAAGG-1\" #>  [95] \"samplename_TCCCTGGTCCCGCAAA-1\" \"samplename_TCCTGGTTCGAGGAAC-1\" #>  [97] \"samplename_TCGATTAAGCCGCTAA-1\" \"samplename_TCTAACTTCTTTGACT-1\" #>  [99] \"samplename_TCTTAGCGTCCAAGAC-1\" \"samplename_TCTTCAAGTAATGGCC-1\" #> [101] \"samplename_TGAGAACCAAAGGTAC-1\" \"samplename_TGAGAACCAAGGTGCA-1\" #> [103] \"samplename_TGCTCCGTCAAACCGT-1\" \"samplename_TGGTTCCTCTTGCTAT-1\" #> [105] \"samplename_TGTGGCCAGGGACTAA-1\" \"samplename_TGTGGCCAGTAACCAC-1\" #> [107] \"samplename_TGTTATGAGTAGCGCC-1\" \"samplename_TGTTGGCCAGGCTAAG-1\" #> [109] \"samplename_TTAGCTGCATAAGCAA-1\" \"samplename_TTGCAGCCAGAGGGAG-1\" #> [111] \"samplename_TTTAACCTCGGTTCCT-1\" \"samplename_TTTCTTGCAGAGGCTA-1\" #>  #> $RNA #>   [1] \"samplename_AAAGGTTAGTCACCAG-1\" \"samplename_AACAAAGGTCATGCAA-1\" #>   [3] \"samplename_AACGGTAAGGATAAAC-1\" \"samplename_AAGAACAGTTTGAGGC-1\" #>   [5] \"samplename_AAGCATGAGGGACGCA-1\" \"samplename_AAGCTCCCAACCCTCC-1\" #>   [7] \"samplename_AATAGAGGTTTGCGAA-1\" \"samplename_AATGTCATCATGCAAC-1\" #>   [9] \"samplename_AATTAGCGTAAAGCGG-1\" \"samplename_AATTGCTCATCGCTTT-1\" #>  [11] \"samplename_ACACGGACAGCTCATA-1\" \"samplename_ACCTAAATCCAGCACA-1\" #>  [13] \"samplename_ACTATGTCAGTAGGTG-1\" \"samplename_ACTATGTCATTAAACC-1\" #>  [15] \"samplename_ACTCACCTCATTACAG-1\" \"samplename_ACTTACAAGTAAGGGC-1\" #>  [17] \"samplename_AGAAACTAGGTCAAAG-1\" \"samplename_AGACCCGGTAACCACA-1\" #>  [19] \"samplename_AGCATCCCACCTCACC-1\" \"samplename_AGCTTAATCGCAAACT-1\" #>  [21] \"samplename_AGGATATAGTTAGTGC-1\" \"samplename_ATACCGGTCTTAGGGT-1\" #>  [23] \"samplename_ATATGTCCACCTCACC-1\" \"samplename_ATGACCAGTCACCAAA-1\" #>  [25] \"samplename_ATGACTCAGGGCCACT-1\" \"samplename_ATGCAGGCAACTAGCC-1\" #>  [27] \"samplename_ATGCGATTCAGCAAAG-1\" \"samplename_ATGGCTTAGTTGTCTT-1\" #>  [29] \"samplename_ATGGTTATCCAAATCA-1\" \"samplename_ATGTTGTCATTGTGCA-1\" #>  [31] \"samplename_ATTGCACAGGACCTGC-1\" \"samplename_CAACTAGGTGTTTGAG-1\" #>  [33] \"samplename_CAAGAACCACCTACTT-1\" \"samplename_CAAGAACCATGAAGTA-1\" #>  [35] \"samplename_CAGATTCAGCATGTCG-1\" \"samplename_CAGCATGTCGGTTCCT-1\" #>  [37] \"samplename_CATGCAAGTTGAGCCG-1\" \"samplename_CATTTGTTCAATGACC-1\" #>  [39] \"samplename_CCAGTTTGTAATCACG-1\" \"samplename_CCATATTTCAAGCGCC-1\" #>  [41] \"samplename_CCGCTAAAGGCATGTT-1\" \"samplename_CCGTTGCGTGTGTCCC-1\" #>  [43] \"samplename_CCTGGATCATTCCTCG-1\" \"samplename_CCTTCAATCCGCCAAA-1\" #>  [45] \"samplename_CGAAGTAAGGGCTAAA-1\" \"samplename_CGCACACAGTTCCTGC-1\" #>  [47] \"samplename_CGCCTCATCGATTATG-1\" \"samplename_CGCTACTTCCCTCAGT-1\" #>  [49] \"samplename_CGGATAAAGGCATTGT-1\" \"samplename_CGGATTAGTCATGAGC-1\" #>  [51] \"samplename_CGGTGAGAGCTTGCTC-1\" \"samplename_CGTAATGGTCACCTAT-1\" #>  [53] \"samplename_CGTGCACAGGTAGCTT-1\" \"samplename_CGTGTGTCACTCGCTC-1\" #>  [55] \"samplename_CTACTAAAGGGATTAG-1\" \"samplename_CTAGCTTGTTAATGCG-1\" #>  [57] \"samplename_CTAGTGAGTTAACGAT-1\" \"samplename_CTATGTTTCTTGGATA-1\" #>  [59] \"samplename_CTCACACTCCCATAAA-1\" \"samplename_CTCACTCAGGCTATGT-1\" #>  [61] \"samplename_CTCATTAGTGGATTGC-1\" \"samplename_CTCCGGACAATGCGCT-1\" #>  [63] \"samplename_GAAAGGCTCTAAGTGC-1\" \"samplename_GAAGGAACACTCGCTC-1\" #>  [65] \"samplename_GAGATAAGTTTCCTCC-1\" \"samplename_GAGGTTAAGGACCTTG-1\" #>  [67] \"samplename_GATCAGGCAACTAGCC-1\" \"samplename_GATTGCGTCCTCACTA-1\" #>  [69] \"samplename_GCAAGTGCAGGACCTT-1\" \"samplename_GCAATCTAGCTCCTTA-1\" #>  [71] \"samplename_GCCAGGAAGATGGACA-1\" \"samplename_GCCAGGTTCACAGGAA-1\" #>  [73] \"samplename_GCTGTAAGTTAAGGCC-1\" \"samplename_GCTGTGATCATCCTCA-1\" #>  [75] \"samplename_GCTTAGTAGTAATCCA-1\" \"samplename_GCTTGACCAGCCAGTT-1\" #>  [77] \"samplename_GGAGGTTAGGCTAATC-1\" \"samplename_GGGCTAACAGCCAGAA-1\" #>  [79] \"samplename_GGTACAAAGCAACAAG-1\" \"samplename_GGTACTAGTGTGAGGA-1\" #>  [81] \"samplename_GGTCAAGCATGAGCAG-1\" \"samplename_GGTGAGCCAGCTCATA-1\" #>  [83] \"samplename_GGTTAATGTATTCGTC-1\" \"samplename_GGTTATGGTGTTTCAC-1\" #>  [85] \"samplename_GTACTTCGTTGTGACA-1\" \"samplename_GTAGCGCTCCTTTACG-1\" #>  [87] \"samplename_GTCTAGCCAGGATGGC-1\" \"samplename_GTCTCACTCTTTAGGA-1\" #>  [89] \"samplename_GTGTGCGGTTACCGGG-1\" \"samplename_GTTAAGTGTAGGTGTC-1\" #>  [91] \"samplename_GTTAGACTCACACAGT-1\" \"samplename_GTTCACCTCATGCGTG-1\" #>  [93] \"samplename_GTTGTGAGTTAAGCTG-1\" \"samplename_TAAAGCCTCTAAGGTC-1\" #>  [95] \"samplename_TAATGCATCGATCAGT-1\" \"samplename_TACATCAAGGCTAATC-1\" #>  [97] \"samplename_TACGGTTAGTTTGTCT-1\" \"samplename_TACTAAGTCCGCATGA-1\" #>  [99] \"samplename_TAGTTGTCAAGCCAGA-1\" \"samplename_TATATCCTCCGCACAA-1\" #> [101] \"samplename_TATTACCTCCTGAATA-1\" \"samplename_TCAGCCTTCACCTGCT-1\" #> [103] \"samplename_TCAGCGATCTTTAAGG-1\" \"samplename_TCCCTGGTCCCGCAAA-1\" #> [105] \"samplename_TCCTGGTTCGAGGAAC-1\" \"samplename_TCGATTAAGCCGCTAA-1\" #> [107] \"samplename_TCTAACTTCTTTGACT-1\" \"samplename_TCTTAGCGTCCAAGAC-1\" #> [109] \"samplename_TGAGAACCAAAGGTAC-1\" \"samplename_TGAGAACCAAGGTGCA-1\" #> [111] \"samplename_TGCGCGAGTTGTTGGA-1\" \"samplename_TGGTTCCTCTTGCTAT-1\" #> [113] \"samplename_TGTAACTCAAATTGCT-1\" \"samplename_TGTGGCCAGGGACTAA-1\" #> [115] \"samplename_TGTGGCCAGTAACCAC-1\" \"samplename_TGTTGGCCAGGCTAAG-1\" #> [117] \"samplename_TTAGCTGCATAAGCAA-1\" \"samplename_TTTAACCTCCTTGCGT-1\" #> [119] \"samplename_TTTAACCTCGGTTCCT-1\" #>  Cells(muscadet_obj)$ATAC # cell names vector from the omic ATAC #>   [1] \"samplename_AACAAAGGTCATGCAA-1\" \"samplename_AACGGTAAGGATAAAC-1\" #>   [3] \"samplename_AAGCATGAGGGACGCA-1\" \"samplename_AAGCTCCCAACCCTCC-1\" #>   [5] \"samplename_AATGTCATCATGCAAC-1\" \"samplename_AATTAGCGTAAAGCGG-1\" #>   [7] \"samplename_ACACGGACAGCTCATA-1\" \"samplename_ACCAATATCCTCATGC-1\" #>   [9] \"samplename_ACCTAAATCCAGCACA-1\" \"samplename_ACTATGTCAGTAGGTG-1\" #>  [11] \"samplename_ACTTACAAGTAAGGGC-1\" \"samplename_AGAAACTAGGTCAAAG-1\" #>  [13] \"samplename_AGAAGGTGTAGTAAGA-1\" \"samplename_AGACCCGGTAACCACA-1\" #>  [15] \"samplename_AGCATCCCACCTCACC-1\" \"samplename_AGCTTAATCGCAAACT-1\" #>  [17] \"samplename_AGGATATAGTTAGTGC-1\" \"samplename_AGTTACATCCGGTTAG-1\" #>  [19] \"samplename_ATATGTCCACCTCACC-1\" \"samplename_ATGACCAGTCACCAAA-1\" #>  [21] \"samplename_ATGACTCAGGGCCACT-1\" \"samplename_ATGGTTATCCAAATCA-1\" #>  [23] \"samplename_ATGTTGTCATTGTGCA-1\" \"samplename_ATGTTTGAGCTTAGTA-1\" #>  [25] \"samplename_ATTTGCGCAATACTGT-1\" \"samplename_CAACTAGGTGTTTGAG-1\" #>  [27] \"samplename_CAGATTCAGCATGTCG-1\" \"samplename_CAGCATGTCGGTTCCT-1\" #>  [29] \"samplename_CATGCAAGTTGAGCCG-1\" \"samplename_CATTTGTTCAATGACC-1\" #>  [31] \"samplename_CCAGTTTGTAATCACG-1\" \"samplename_CCCTCATAGGACAATG-1\" #>  [33] \"samplename_CCGCTAAAGGCATGTT-1\" \"samplename_CCGTTGCGTGTGTCCC-1\" #>  [35] \"samplename_CCTGGATCATTCCTCG-1\" \"samplename_CCTTCAATCCGCCAAA-1\" #>  [37] \"samplename_CGCCTCATCGATTATG-1\" \"samplename_CGCTACTTCCCTCAGT-1\" #>  [39] \"samplename_CGCTATGAGTGACCTG-1\" \"samplename_CGGATAAAGGCATTGT-1\" #>  [41] \"samplename_CGGATTAGTCATGAGC-1\" \"samplename_CGGTGAGAGCTTGCTC-1\" #>  [43] \"samplename_CGGTTTCTCAATTACG-1\" \"samplename_CGTAATGGTCACCTAT-1\" #>  [45] \"samplename_CGTGCACAGGTAGCTT-1\" \"samplename_CGTGTGTCAAGGATTA-1\" #>  [47] \"samplename_CTAGCTTGTTAATGCG-1\" \"samplename_CTAGTGAGTTAACGAT-1\" #>  [49] \"samplename_CTATGTTTCTTGGATA-1\" \"samplename_CTCACACTCCCATAAA-1\" #>  [51] \"samplename_CTCACTCAGCGGATAA-1\" \"samplename_CTCCGGACAATGCGCT-1\" #>  [53] \"samplename_CTTCAAGCACTAGGTC-1\" \"samplename_GAAAGGCTCTAAGTGC-1\" #>  [55] \"samplename_GAAGGAACACTCGCTC-1\" \"samplename_GAGCAAGGTGGTTCTT-1\" #>  [57] \"samplename_GAGGTACAGCAAGGTA-1\" \"samplename_GAGGTTAAGGACCTTG-1\" #>  [59] \"samplename_GATCAGGCAACTAGCC-1\" \"samplename_GATTGCGTCCTCACTA-1\" #>  [61] \"samplename_GCAAGTGCAGGACCTT-1\" \"samplename_GCAATCTAGCTCCTTA-1\" #>  [63] \"samplename_GCAGGAAGTGCATCGG-1\" \"samplename_GCAGGTTGTTATTGCC-1\" #>  [65] \"samplename_GCCAGGTTCACAGGAA-1\" \"samplename_GCTGCAATCCGTAAAC-1\" #>  [67] \"samplename_GCTGTAAGTTAAGGCC-1\" \"samplename_GCTTAGTAGTAATCCA-1\" #>  [69] \"samplename_GGAGGTTAGGCTAATC-1\" \"samplename_GGCGGTAAGAACAAGT-1\" #>  [71] \"samplename_GGGCTAACAGCCAGAA-1\" \"samplename_GGTACTAGTGTGAGGA-1\" #>  [73] \"samplename_GGTCAAGCATGAGCAG-1\" \"samplename_GGTGAGCCAGCTCATA-1\" #>  [75] \"samplename_GGTTAATGTATTCGTC-1\" \"samplename_GGTTAGCGTCAGGCAT-1\" #>  [77] \"samplename_GGTTATGGTGTTTCAC-1\" \"samplename_GGTTGCTCAGGTTATT-1\" #>  [79] \"samplename_GTACTTCGTTGTGACA-1\" \"samplename_GTAGCGCTCCTTTACG-1\" #>  [81] \"samplename_GTCTAGCCAGGATGGC-1\" \"samplename_GTGTGCGGTTACCGGG-1\" #>  [83] \"samplename_GTTAAGTGTAGGTGTC-1\" \"samplename_GTTAGACTCACACAGT-1\" #>  [85] \"samplename_GTTGCCCGTTAGGATT-1\" \"samplename_GTTTAACCACCTGTAA-1\" #>  [87] \"samplename_TAATGCATCGATCAGT-1\" \"samplename_TACATCAAGGCTAATC-1\" #>  [89] \"samplename_TACGGTTAGTTTGTCT-1\" \"samplename_TATATCCTCCGCACAA-1\" #>  [91] \"samplename_TATTAGCCAGGCTAAG-1\" \"samplename_TATTGACCAGCGCTTG-1\" #>  [93] \"samplename_TCAGCCTTCACCTGCT-1\" \"samplename_TCAGCGATCTTTAAGG-1\" #>  [95] \"samplename_TCCCTGGTCCCGCAAA-1\" \"samplename_TCCTGGTTCGAGGAAC-1\" #>  [97] \"samplename_TCGATTAAGCCGCTAA-1\" \"samplename_TCTAACTTCTTTGACT-1\" #>  [99] \"samplename_TCTTAGCGTCCAAGAC-1\" \"samplename_TCTTCAAGTAATGGCC-1\" #> [101] \"samplename_TGAGAACCAAAGGTAC-1\" \"samplename_TGAGAACCAAGGTGCA-1\" #> [103] \"samplename_TGCTCCGTCAAACCGT-1\" \"samplename_TGGTTCCTCTTGCTAT-1\" #> [105] \"samplename_TGTGGCCAGGGACTAA-1\" \"samplename_TGTGGCCAGTAACCAC-1\" #> [107] \"samplename_TGTTATGAGTAGCGCC-1\" \"samplename_TGTTGGCCAGGCTAAG-1\" #> [109] \"samplename_TTAGCTGCATAAGCAA-1\" \"samplename_TTGCAGCCAGAGGGAG-1\" #> [111] \"samplename_TTTAACCTCGGTTCCT-1\" \"samplename_TTTCTTGCAGAGGCTA-1\" Cells(muscadet_obj$ATAC) # cell names vector from the ATAC muscomic object #>   [1] \"samplename_AACAAAGGTCATGCAA-1\" \"samplename_AACGGTAAGGATAAAC-1\" #>   [3] \"samplename_AAGCATGAGGGACGCA-1\" \"samplename_AAGCTCCCAACCCTCC-1\" #>   [5] \"samplename_AATGTCATCATGCAAC-1\" \"samplename_AATTAGCGTAAAGCGG-1\" #>   [7] \"samplename_ACACGGACAGCTCATA-1\" \"samplename_ACCAATATCCTCATGC-1\" #>   [9] \"samplename_ACCTAAATCCAGCACA-1\" \"samplename_ACTATGTCAGTAGGTG-1\" #>  [11] \"samplename_ACTTACAAGTAAGGGC-1\" \"samplename_AGAAACTAGGTCAAAG-1\" #>  [13] \"samplename_AGAAGGTGTAGTAAGA-1\" \"samplename_AGACCCGGTAACCACA-1\" #>  [15] \"samplename_AGCATCCCACCTCACC-1\" \"samplename_AGCTTAATCGCAAACT-1\" #>  [17] \"samplename_AGGATATAGTTAGTGC-1\" \"samplename_AGTTACATCCGGTTAG-1\" #>  [19] \"samplename_ATATGTCCACCTCACC-1\" \"samplename_ATGACCAGTCACCAAA-1\" #>  [21] \"samplename_ATGACTCAGGGCCACT-1\" \"samplename_ATGGTTATCCAAATCA-1\" #>  [23] \"samplename_ATGTTGTCATTGTGCA-1\" \"samplename_ATGTTTGAGCTTAGTA-1\" #>  [25] \"samplename_ATTTGCGCAATACTGT-1\" \"samplename_CAACTAGGTGTTTGAG-1\" #>  [27] \"samplename_CAGATTCAGCATGTCG-1\" \"samplename_CAGCATGTCGGTTCCT-1\" #>  [29] \"samplename_CATGCAAGTTGAGCCG-1\" \"samplename_CATTTGTTCAATGACC-1\" #>  [31] \"samplename_CCAGTTTGTAATCACG-1\" \"samplename_CCCTCATAGGACAATG-1\" #>  [33] \"samplename_CCGCTAAAGGCATGTT-1\" \"samplename_CCGTTGCGTGTGTCCC-1\" #>  [35] \"samplename_CCTGGATCATTCCTCG-1\" \"samplename_CCTTCAATCCGCCAAA-1\" #>  [37] \"samplename_CGCCTCATCGATTATG-1\" \"samplename_CGCTACTTCCCTCAGT-1\" #>  [39] \"samplename_CGCTATGAGTGACCTG-1\" \"samplename_CGGATAAAGGCATTGT-1\" #>  [41] \"samplename_CGGATTAGTCATGAGC-1\" \"samplename_CGGTGAGAGCTTGCTC-1\" #>  [43] \"samplename_CGGTTTCTCAATTACG-1\" \"samplename_CGTAATGGTCACCTAT-1\" #>  [45] \"samplename_CGTGCACAGGTAGCTT-1\" \"samplename_CGTGTGTCAAGGATTA-1\" #>  [47] \"samplename_CTAGCTTGTTAATGCG-1\" \"samplename_CTAGTGAGTTAACGAT-1\" #>  [49] \"samplename_CTATGTTTCTTGGATA-1\" \"samplename_CTCACACTCCCATAAA-1\" #>  [51] \"samplename_CTCACTCAGCGGATAA-1\" \"samplename_CTCCGGACAATGCGCT-1\" #>  [53] \"samplename_CTTCAAGCACTAGGTC-1\" \"samplename_GAAAGGCTCTAAGTGC-1\" #>  [55] \"samplename_GAAGGAACACTCGCTC-1\" \"samplename_GAGCAAGGTGGTTCTT-1\" #>  [57] \"samplename_GAGGTACAGCAAGGTA-1\" \"samplename_GAGGTTAAGGACCTTG-1\" #>  [59] \"samplename_GATCAGGCAACTAGCC-1\" \"samplename_GATTGCGTCCTCACTA-1\" #>  [61] \"samplename_GCAAGTGCAGGACCTT-1\" \"samplename_GCAATCTAGCTCCTTA-1\" #>  [63] \"samplename_GCAGGAAGTGCATCGG-1\" \"samplename_GCAGGTTGTTATTGCC-1\" #>  [65] \"samplename_GCCAGGTTCACAGGAA-1\" \"samplename_GCTGCAATCCGTAAAC-1\" #>  [67] \"samplename_GCTGTAAGTTAAGGCC-1\" \"samplename_GCTTAGTAGTAATCCA-1\" #>  [69] \"samplename_GGAGGTTAGGCTAATC-1\" \"samplename_GGCGGTAAGAACAAGT-1\" #>  [71] \"samplename_GGGCTAACAGCCAGAA-1\" \"samplename_GGTACTAGTGTGAGGA-1\" #>  [73] \"samplename_GGTCAAGCATGAGCAG-1\" \"samplename_GGTGAGCCAGCTCATA-1\" #>  [75] \"samplename_GGTTAATGTATTCGTC-1\" \"samplename_GGTTAGCGTCAGGCAT-1\" #>  [77] \"samplename_GGTTATGGTGTTTCAC-1\" \"samplename_GGTTGCTCAGGTTATT-1\" #>  [79] \"samplename_GTACTTCGTTGTGACA-1\" \"samplename_GTAGCGCTCCTTTACG-1\" #>  [81] \"samplename_GTCTAGCCAGGATGGC-1\" \"samplename_GTGTGCGGTTACCGGG-1\" #>  [83] \"samplename_GTTAAGTGTAGGTGTC-1\" \"samplename_GTTAGACTCACACAGT-1\" #>  [85] \"samplename_GTTGCCCGTTAGGATT-1\" \"samplename_GTTTAACCACCTGTAA-1\" #>  [87] \"samplename_TAATGCATCGATCAGT-1\" \"samplename_TACATCAAGGCTAATC-1\" #>  [89] \"samplename_TACGGTTAGTTTGTCT-1\" \"samplename_TATATCCTCCGCACAA-1\" #>  [91] \"samplename_TATTAGCCAGGCTAAG-1\" \"samplename_TATTGACCAGCGCTTG-1\" #>  [93] \"samplename_TCAGCCTTCACCTGCT-1\" \"samplename_TCAGCGATCTTTAAGG-1\" #>  [95] \"samplename_TCCCTGGTCCCGCAAA-1\" \"samplename_TCCTGGTTCGAGGAAC-1\" #>  [97] \"samplename_TCGATTAAGCCGCTAA-1\" \"samplename_TCTAACTTCTTTGACT-1\" #>  [99] \"samplename_TCTTAGCGTCCAAGAC-1\" \"samplename_TCTTCAAGTAATGGCC-1\" #> [101] \"samplename_TGAGAACCAAAGGTAC-1\" \"samplename_TGAGAACCAAGGTGCA-1\" #> [103] \"samplename_TGCTCCGTCAAACCGT-1\" \"samplename_TGGTTCCTCTTGCTAT-1\" #> [105] \"samplename_TGTGGCCAGGGACTAA-1\" \"samplename_TGTGGCCAGTAACCAC-1\" #> [107] \"samplename_TGTTATGAGTAGCGCC-1\" \"samplename_TGTTGGCCAGGCTAAG-1\" #> [109] \"samplename_TTAGCTGCATAAGCAA-1\" \"samplename_TTGCAGCCAGAGGGAG-1\" #> [111] \"samplename_TTTAACCTCGGTTCCT-1\" \"samplename_TTTCTTGCAGAGGCTA-1\""},{"path":"https://icagen.github.io/muscadet/reference/muscadet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"muscadet: Multiomics Single-cell Copy number Alterations Detection — muscadet-package","title":"muscadet: Multiomics Single-cell Copy number Alterations Detection — muscadet-package","text":"Identification copy number alterations (CNAs) cancer cells single-cell multiomics data.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/muscadet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"muscadet: Multiomics Single-cell Copy number Alterations Detection — muscadet-package","text":"Maintainer: Marie Denoulet marie.denoulet@univ-nantes.fr (ORCID) Authors: Nils Giordano nils.giordano@univ-nantes.fr (ORCID) Eric Letouzé eric.letouze@gmail.com (ORCID) Céline Vallot celine.vallot@curie.fr (ORCID) Stéphane Minvielle stephane.minvielle@univ-nantes.fr (ORCID) contributors: Mia Cherkaoui mia.cherkaoui@univ-nantes.fr (ORCID) [contributor] Florence Magrangeas florence.magrangeas@chu-nantes.fr (ORCID) [contributor]","code":""},{"path":"https://icagen.github.io/muscadet/reference/muscadet_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data: muscadet objects — muscadet_obj","title":"Example data: muscadet objects — muscadet_obj","text":"muscadet objects, containing two single-cell omic datasets: scATAC-seq scRNA-seq. muscadet_obj tumor cells data: sample cells muscadet_obj_ref normal cells data: reference cells","code":""},{"path":"https://icagen.github.io/muscadet/reference/muscadet_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data: muscadet objects — muscadet_obj","text":"","code":"muscadet_obj  muscadet_obj_ref"},{"path":"https://icagen.github.io/muscadet/reference/muscadet_obj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data: muscadet objects — muscadet_obj","text":"muscadet objects following slots: omics List muscomic objects, one per single-cell omic (list). bulk.data List data paired bulk sequencing (list). clustering List data associated clustering cells based coverage log R ratio values (list). cnacalling List data associated calling copy number alterations (CNAs) (list). genome Reference genome name among: \"hg38\", \"hg19\" \"mm10\" (character).","code":""},{"path":"https://icagen.github.io/muscadet/reference/muscomic-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The muscomic class — muscomic-class","title":"The muscomic class — muscomic-class","text":"muscomic object encapsulates coverage allelic data one single-cell omic dataset used primary input muscadet analysis.","code":""},{"path":"https://icagen.github.io/muscadet/reference/muscomic-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The muscomic class — muscomic-class","text":"type Type single-cell omic. Either ATAC RNA currently supported (character). label.omic Label display single-cell omic (character). coverage Coverage data features (list). allelic Allelic data variant positions (common SNPs individual-specific heterozygous positions) (list).","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/muscomic-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The muscomic class — muscomic-class","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\")  muscadet_obj$ATAC #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  log.ratio coverage data matrix  #>  112 cells  #>  133 features: windows of peaks  #>  691 variant positions  muscadet_obj$RNA #> A muscomic object of type RNA labelled scRNA-seq containing:  #>  log.ratio coverage data matrix  #>  119 cells  #>  349 features: genes  #>  373 variant positions   str(muscadet_obj$ATAC, max.level = 2) #> Formal class 'muscomic' [package \"muscadet\"] with 4 slots #>   ..@ type      : chr \"ATAC\" #>   ..@ label.omic: chr \"scATAC-seq\" #>   ..@ coverage  :List of 6 #>   ..@ allelic   :List of 1"},{"path":"https://icagen.github.io/muscadet/reference/plotCNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CNA segments across clusters from a muscadet object — plotCNA","title":"Plot CNA segments across clusters from a muscadet object — plotCNA","text":"function visualizes copy number alteration (CNA) segments across clusters based data stored muscadet object. displays CNAs clusters scales y-axis based proportion cells cluster.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotCNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CNA segments across clusters from a muscadet object — plotCNA","text":"","code":"plotCNA(   x,   title = NULL,   cna.colors = c(gain = \"#EF6F6AFF\", loss = \"#6699CCFF\", cnloh = \"#44AA99FF\"),   cf.gradient = TRUE )"},{"path":"https://icagen.github.io/muscadet/reference/plotCNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CNA segments across clusters from a muscadet object — plotCNA","text":"x muscadet object containing CNA calling data visualized (generated using cnaCalling()). title optional title plot. Default NULL. cna.colors vector 3 colors CNA states: gain, loss, cnloh (named vector names \"gain\", \"loss\", \"cnloh\" values respective colors). Default c(\"gain\" = \"#EF6F6AFF\", \"loss\" = \"#6699CCFF\", \"cnloh\" = \"#44AA99FF\"). cf.gradient Logical. TRUE adds alpha transparency gradient CNA color block based cell fraction. Default TRUE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotCNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CNA segments across clusters from a muscadet object — plotCNA","text":"ggplot object representing CNA segments plot.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotCNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CNA segments across clusters from a muscadet object — plotCNA","text":"","code":"if (FALSE) { # \\dontrun{ library(\"ggplot2\")  # Load example muscadet object # data(\"muscadet_obj\")  # Plot CNA segments p <- plotCNA(muscadet_obj, title = \"Copy Number Alterations in Example Data\") p ggsave(     filename = file.path(\"CNAplot.png\"),     plot = p,     width = 3000,     height = 800,     units = \"px\" ) } # }"},{"path":"https://icagen.github.io/muscadet/reference/plotIndexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clustering validation indexes for a muscadet object — plotIndexes","title":"Plot clustering validation indexes for a muscadet object — plotIndexes","text":"generates plot clustering validation indexes clustering partition within muscadet object. index values computed using distances common cells across omics muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotIndexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clustering validation indexes for a muscadet object — plotIndexes","text":"","code":"plotIndexes(x, index = NULL, colors = NULL, title = NULL)"},{"path":"https://icagen.github.io/muscadet/reference/plotIndexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clustering validation indexes for a muscadet object — plotIndexes","text":"x muscadet object containing clustering data (generated using clusterMuscadet()). index Character vector specifying one validation indexes plot among \"silhouette\", \"dunn2\", \"daviesbouldin\", \"pearsongamma\", \"c\". NULL, default available indexes included. multiple indexes selected, values normalized comparability. colors Vector colors index plot (character vector). Default NULL, uses predefined colors indexes. title Character string title plot (character string). NULL, default title generated.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotIndexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clustering validation indexes for a muscadet object — plotIndexes","text":"ggplot object visualizing clustering validation indexes across different clustering partitions (res resolution k number clusters depending used clustering method).","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotIndexes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot clustering validation indexes for a muscadet object — plotIndexes","text":"function computes several clustering validation indexes, including: Silhouette: Measures similar object cluster compared others (see cluster::silhouette). Average individual silhouette widths. Dunn2: ratio smallest distance observations different clusters largest within-cluster distance (see fpc::cluster.stats $dunn2). Minimum average dissimilarity two cluster / maximum average within cluster dissimilarity. Davies-Bouldin: Measures cluster compactness separation (see clusterSim::index.DB). Pearson's Gamma: Evaluates goodness clustering based correlation (see fpc::cluster.stats $pearsongamma). Correlation distances 0-1-vector 0 means cluster, 1 means different clusters. \"Normalized gamma\" Halkidi et al. (2001). C Index (Hubert & Levin C index): Measures internal cluster quality compared random data (see clusterSim::index.C). multiple indexes selected, values normalized fall 0 1. indexes better minimized (\"pearsongamma\" \"c\"), values reversed easier comparison. partition mean indexes maximal highlighted dot.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotIndexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clustering validation indexes for a muscadet object — plotIndexes","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2)  # Load example muscadet object # data(\"muscadet_obj\")  # Plot all indexes plotIndexes(muscadet_obj) ggsave(\"plot_indexes.png\", width = 8, height = 4)  # Plot a specific index plotIndexes(muscadet_obj, index = \"silhouette\") ggsave(\"plot_indexes_sil.png\", width = 7, height = 4) } # }"},{"path":"https://icagen.github.io/muscadet/reference/plotProfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CNA profiles from muscadet object — plotProfile","title":"Plot CNA profiles from muscadet object — plotProfile","text":"function generates multi-panel plot copy number alteration (CNA) profiles muscadet object, including: log R ratios values, log odds ratio (variant allele frequency), copy numbers, CNA status cell fractions.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotProfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CNA profiles from muscadet object — plotProfile","text":"","code":"plotProfile(   x,   data,   title = NULL,   allelic.type = \"lor\",   point.cex = c(0.4, 0.5),   chrom.colors = c(\"slategrey\", \"skyblue\"),   lor.colors = c(\"peachpuff2\", \"paleturquoise3\"),   cn.colors = c(\"grey20\", \"brown2\"),   cna.colors = c(gain = \"#EF6F6AFF\", loss = \"#6699CCFF\", cnloh = \"#44AA99FF\"),   cf.colors = c(\"white\", \"grey20\", \"bisque2\"),   dipLogR.color = c(\"magenta4\"),   seg.color = c(\"brown2\") )"},{"path":"https://icagen.github.io/muscadet/reference/plotProfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CNA profiles from muscadet object — plotProfile","text":"x muscadet object containing CNA calling data visualized (generated using cnaCalling()). data Either cluster identifier plot data cluster \"allcells\" plot data cells. title optional title plot. Default NULL. allelic.type character string indicating allelic metric plot: \"lor\" log odds ratio \"vaf\" variant allele frequency. Default \"lor\". point.cex Numeric vector length 1 2 specifying size points plots. single value provided, replicated plots. Default c(0.4, 0.5). chrom.colors character vector length 2 defining alternating chromosome colors. Default c(\"slategrey\", \"skyblue\"). lor.colors character vector length 2 log odds ratio point colors depending variant allele frequency cells. Use \"none\" use alternating chromosome colors (defined chrom.colors). Default c(\"peachpuff2\", \"paleturquoise3\"). cn.colors character vector length 2 total copy number minor allele copy number segment colors. Default c(\"black\", \"brown2\"). cna.colors vector 3 colors CNA states: gain, loss, cnloh (named vector names \"gain\", \"loss\", \"cnloh\" values respective colors). Default c(\"gain\" = \"#EF6F6AFF\", \"loss\" = \"#6699CCFF\", \"cnloh\" = \"#44AA99FF\"). cf.colors character vector length 3 cellular fraction gradient (10 values): start color gradient, end color gradient, color normal diploid (depending ploidy). Default c(\"white\", \"steelblue\", \"bisque2\"). dipLogR.color character string diploid log R ratio line color. Default \"magenta4\". seg.color character string color segment medians. Default \"brown2\".","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotProfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CNA profiles from muscadet object — plotProfile","text":"multi-panel plot CNA profiles produced.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotProfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CNA profiles from muscadet object — plotProfile","text":"","code":"if (FALSE) { # \\dontrun{ # Load example muscadet object # data(\"muscadet_obj\")  # Plot profile for all cells pdf(\"CNAprofile_allcells.pdf\", width = 15, height = 7.5) # Save as PDF plotProfile(muscadet_obj, data = \"allcells\", title = \"Example data - all cells\") dev.off() } # }"},{"path":"https://icagen.github.io/muscadet/reference/plotSil.html","id":null,"dir":"Reference","previous_headings":"","what":"Silhouette plot for muscadet object — plotSil","title":"Silhouette plot for muscadet object — plotSil","text":"Generate silhouette plot specified clustering partition within muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotSil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silhouette plot for muscadet object — plotSil","text":"","code":"plotSil(x, partition, colors = NULL, title = NULL, annotations = TRUE)"},{"path":"https://icagen.github.io/muscadet/reference/plotSil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silhouette plot for muscadet object — plotSil","text":"x muscadet object containing clustering data (using clusterMuscadet()). partition Value specifying clustering partition plot (numeric character). either resolution k number cluster (k) used clustering depending clustering method (res_range k_range clusterMuscadet()). colors Vector colors cluster annotation (character vector). Default NULL, uses predefined colors. title Character string title plot (character string). NULL, default title generated. annotations TRUE FALSE (logical). Whether add annotations per clusters. default: TRUE.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotSil.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silhouette plot for muscadet object — plotSil","text":"ggplot object representing silhouette plot.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotSil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Silhouette plot for muscadet object — plotSil","text":"","code":"if (FALSE) { # \\dontrun{ library(\"ggplot2\")  # Load example muscadet object # data(\"muscadet_obj\") plotSil(muscadet_obj, partition = 0.6)  # Loop over partitions for (p in names(muscadet_obj$clustering$clusters)) {     plot <- plotSil(muscadet_obj, p)     ggsave(paste0(\"plot_silhouette_\", p, \".png\"), plot) } } # }"},{"path":"https://icagen.github.io/muscadet/reference/plotUMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot UMAP Coordinates from a muscadet Object — plotUMAP","title":"Plot UMAP Coordinates from a muscadet Object — plotUMAP","text":"Visualize UMAP (Uniform Manifold Approximation Projection) coordinates stored muscadet object. function allows coloring clusters optionally adding cluster labels.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotUMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot UMAP Coordinates from a muscadet Object — plotUMAP","text":"","code":"plotUMAP(   x,   partition = NULL,   clusters = NULL,   colors = NULL,   title = \"\",   lab.x = \"UMAP 1\",   lab.y = \"UMAP 2\",   add_clusters_labels = FALSE,   point.size = 0.5,   legend.point.size = 3,   ... )"},{"path":"https://icagen.github.io/muscadet/reference/plotUMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot UMAP Coordinates from a muscadet Object — plotUMAP","text":"x muscadet object containing clustering data (using clusterMuscadet()). partition (Optional) Value specifying clustering partition plot (numeric character). either resolution number cluster (k) used clustering depending clustering method (res_range k_range clusterMuscadet()). partition clusters arguments NULL (default), assigned clusters CNA calling (x@cnacalling$cluster) used available x (see assignClusters()). clusters (Optional) custom named vector cluster assignments (integer named vector). Names must corresponds cell names within muscadet object x. contains less cells muscadet object x, missing cells filtered displayed heatmap. show_missing = FALSE provided cells data omics displayed. partition clusters arguments NULL (default), assigned clusters CNA calling (x@cnacalling$cluster) used available x (see assignClusters()). colors Vector colors cluster annotation (character vector). NULL (default), uses predefined colors. title Character string title plot (character string). Default empty character string. lab.x Label x-axis (character string). Default \"UMAP 1\". lab.y Label y-axis (character string). Default \"UMAP 2\". add_clusters_labels Logical. TRUE, adds cluster names text boxed labels using add_labels(). Default FALSE. point.size Numeric. Size points UMAP plot passed ggplot2::geom_point(). Default 0.5. legend.point.size Numeric. Size points legend UMAP plot. Default 3. ... Additional arguments passed add_labels() providing underlying geom label names (geom_text(), geom_label(), geom_text_repel(), geom_label_repel()).","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotUMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot UMAP Coordinates from a muscadet Object — plotUMAP","text":"ggplot object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/plotUMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot UMAP Coordinates from a muscadet Object — plotUMAP","text":"","code":"if (FALSE) { # \\dontrun{   p <- plotUMAP(muscadet_obj,                 partition = 0.6,                 title = \"UMAP copy-number clusters\")   print(p) } # }"},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":null,"dir":"Reference","previous_headings":"","what":"Process read count matrix and segmentation — preProcSample2","title":"Process read count matrix and segmentation — preProcSample2","text":"Function adapted facets::preProcSample() process read count matrix generates segmentation tree. modifications original function includes: Incorporation cluster signal columns final result. Change log ratio (cnlr) allelic data, computed log ratio (cnlr) mean previous next coverage positions.","code":""},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process read count matrix and segmentation — preProcSample2","text":"","code":"preProcSample2(   rcmat,   het.thresh = 0.25,   snp.nbhd = 250,   cval = 25,   gbuild = \"hg38\",   hetscale = TRUE,   ndepth = 5,   ndepthmax = 1000 )"},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Process read count matrix and segmentation — preProcSample2","text":"function derived facets::preProcSample() function, modifications fit use muscadet. Seshan VE, Shen R (2021). facets: Cellular Fraction Copy Numbers Tumor Sequencing. R package version 0.6.2, https://github.com/mskcc/facets.","code":""},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process read count matrix and segmentation — preProcSample2","text":"rcmat data frame 8 required columns: Chrom, Pos, .DP, .RD, TUM.DP, TUM.RD, cluster, signal (data.frame). het.thresh VAF (Variant Allele Frequency) threshold call variant positions heterozygous (numeric). Default: 0.25. snp.nbhd Window size selecting loci reduce serial correlation (numeric). Default: 250. cval Critical value segmentation (numeric). Default: 25. gbuild Genome build used alignment. One \"hg19\", \"hg38\", \"mm10\" (character). Default: \"hg19\". hetscale Logical value indicating whether log odds ratio (logOR) scaled give weight test statistics segmentation clustering (logical). Usually 10% snps hets hetscale gives logOR contribution T-square 0.25/proportion hets. Default: TRUE. ndepth Minimum depth normal reference keep (numeric). Default: 5. ndepthmax Maximum normal coverage threshold filtering loci (numeric). Default: 1000.","code":""},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process read count matrix and segmentation — preProcSample2","text":"list containing: pmat Read counts elements loci. gbuild Genome build used analysis. nX Chromosome number X (e.g., 23 human, 20 mouse). clusters Unique clusters processed data. seg.tree Segmentation tree chromosome. jointseg Segmented variant positions data. hscl Scaling factor logOR data.","code":""},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process read count matrix and segmentation — preProcSample2","text":"function processes variant positions data generate segmentation tree. uses procSnps compute initial values, adjusts log ratio allelic signals, computes segmentation using segsnps. SNPs (variants) genome evenly spaced, loci sampled within specified window (snp.nbhd) reduce serial correlation.","code":""},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Process read count matrix and segmentation — preProcSample2","text":"facets-package package Shen R, Seshan VE. FACETS: allele-specific copy number clonal heterogeneity analysis tool high-throughput DNA sequencing. Nucleic Acids Res. 2016 Sep 19;44(16):e131. doi: 10.1093/nar/gkw520. PMID: 27270079; PMCID: PMC5027494.","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/preProcSample2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process read count matrix and segmentation — preProcSample2","text":"","code":"library(\"facets\")  # Load example muscadet object # data(\"muscadet_obj\")  counts <- muscadet_obj$cnacalling$combined.counts counts <- counts[complete.cases(counts),] counts_clus <- counts[which(counts$cluster == 1),] result <- preProcSample2(counts_clus)"},{"path":"https://icagen.github.io/muscadet/reference/process_allele.html","id":null,"dir":"Reference","previous_headings":"","what":"Process allele counts results from SCReadCounts format — process_allele","title":"Process allele counts results from SCReadCounts format — process_allele","text":"function reformats SCReadCounts output standardized VCF-like data frame optionally merges unphased/phased genotype information VCF-format data frame.","code":""},{"path":"https://icagen.github.io/muscadet/reference/process_allele.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process allele counts results from SCReadCounts format — process_allele","text":"","code":"process_allele(data, vcf = NULL, samplename = NULL)"},{"path":"https://icagen.github.io/muscadet/reference/process_allele.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process allele counts results from SCReadCounts format — process_allele","text":"data data frame SCReadCounts output table (data.frame). vcf optional VCF-format data frame unphased/phased genotype information add output (data.frame). samplename optional sample name prefix cell barcodes (character).","code":""},{"path":"https://icagen.github.io/muscadet/reference/process_allele.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process allele counts results from SCReadCounts format — process_allele","text":"cleaned data frame VCF-like standardized columns: cell Barcodes cells (character). id Variant unique identifier defined CHROM_POS_REF_ALT, e.g. \"1_920949_C_G\" (character). CHROM Chromosome integer format, e.g. 15 (X Y chromosomes included) (integer). POS Position variant (1-base positions) (integer). REF Reference allele base, \"\" \"C\" \"G\" \"T\" (character). ALT Alternative allele base, \"\" \"C\" \"G\" \"T\" (character). RD Reference allele depth/count (integer). AD Alternative allele depth/count (integer). DP Total depth/count (integer). GT Genotype (vcf provided): \"0/1\" \"1/0\" unphased; \"0|1\" \"1|0\" phased. (character).","code":""},{"path":"https://icagen.github.io/muscadet/reference/process_allele.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process allele counts results from SCReadCounts format — process_allele","text":"SCReadCounts website Variant Call Format (VCF) format","code":""},{"path":"https://icagen.github.io/muscadet/reference/process_allele.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Process allele counts results from SCReadCounts format — process_allele","text":"SCReadCounts Liu, H., Bousounis, P., Movassagh, M., Edwards, N., Horvath, . SCReadCounts: estimation cell-level SNVs expression scRNA-seq data. BMC Genomics 22, 689 (2021). doi: 10.1186/s12864-021-07974-8","code":""},{"path":"https://icagen.github.io/muscadet/reference/process_allele.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process allele counts results from SCReadCounts format — process_allele","text":"","code":"# Example data sc_data <- data.frame(   ReadGroup = c(\"cell1\", \"cell2\"),   CHROM = c(1, 1),   POS = c(1001, 1002),   REF = c(\"A\", \"C\"),   ALT = c(\"G\", \"T\"),   SNVCount = c(3, 5),   RefCount = c(7, 5),   GoodReads = c(10, 10) )  vcf_data <- data.frame(   CHROM = c(1, 1),   POS = c(1001, 1002),   ID = c(\".\", \".\"),   REF = c(\"A\", \"C\"),   ALT = c(\"G\", \"T\"),   QUAL = c(\".\", \".\"),   FILTER = c(\".\", \".\"),   INFO = c(\".\", \".\"),   FORMAT = c(\"GT\", \"GT\"),   sample1 = c(\"0|1\", \"1|0\"),   stringsAsFactors = FALSE )  data <- process_allele(sc_data, vcf = vcf_data, samplename = \"sampleA\")"},{"path":"https://icagen.github.io/muscadet/reference/save_as_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a data frame as a VCF File — save_as_vcf","title":"Save a data frame as a VCF File — save_as_vcf","text":"function saves given data frame variant calling format (VCF) necessary headers.","code":""},{"path":"https://icagen.github.io/muscadet/reference/save_as_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a data frame as a VCF File — save_as_vcf","text":"","code":"save_as_vcf(data, file, header = NULL)"},{"path":"https://icagen.github.io/muscadet/reference/save_as_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a data frame as a VCF File — save_as_vcf","text":"data data frame containing variant data (data.frame). first column represent chromosome. file character string specifying output file path .vcf .vcf.gz extension (character string). file .vcf.gz extension compressed. header optional custom header VCF format (character vector). default, NULL sets minimal header.","code":""},{"path":"https://icagen.github.io/muscadet/reference/save_as_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a data frame as a VCF File — save_as_vcf","text":"function return value writes VCF file specified path.","code":""},{"path":"https://icagen.github.io/muscadet/reference/save_as_vcf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a data frame as a VCF File — save_as_vcf","text":"function ensures first column named #CHROM writes standard VCF headers. appends variant data tab-separated format.","code":""},{"path":"https://icagen.github.io/muscadet/reference/save_as_vcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a data frame as a VCF File — save_as_vcf","text":"","code":"if (FALSE) { # \\dontrun{ vcf_data <- data.frame(   CHROM = c(\"chr1\", \"chr2\"),   POS = c(12345, 67890),   ID = c(\".\", \".\"),   REF = c(\"A\", \"T\"),   ALT = c(\"G\", \"C\"),   QUAL = c(\".\", \".\"),   FILTER = c(\"PASS\", \"PASS\"),   INFO = c(\"AF=0.5\", \"AF=0.3\"),   FORMAT = c(\"GT\", \"GT\"),   SAMPLE = c(\"0/1\", \"1/1\") ) save_as_vcf(vcf_data, \"output.vcf\") } # }"},{"path":"https://icagen.github.io/muscadet/reference/show-muscadet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"muscadet object overview — show,muscadet-method","title":"muscadet object overview — show,muscadet-method","text":"Overview muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/show-muscadet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"muscadet object overview — show,muscadet-method","text":"","code":"# S4 method for class 'muscadet' show(object)"},{"path":"https://icagen.github.io/muscadet/reference/show-muscadet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"muscadet object overview — show,muscadet-method","text":"object muscadet object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/show-muscadet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"muscadet object overview — show,muscadet-method","text":"Prints summary stdout invisibly returns NULL","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/show-muscadet-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"muscadet object overview — show,muscadet-method","text":"","code":"# Load example muscadet object # data(\"muscadet_obj\")  # Overview of the muscadet object show(muscadet_obj) #> A muscadet object  #>  2 omics: ATAC, RNA  #>  types: ATAC, RNA  #>  labels: scATAC-seq, scRNA-seq  #>  coverage data matrix: log.ratio, log.ratio  #>  cells: 112, 119 (common: 84, total: 147)  #>  features: 133, 349  #>  feature labels: windows of peaks, genes  #>  variant positions: 691, 373  #>  data from paired bulk sequencing: WGS  #>  clustering: partitions = 0.6, 0.8, 1 ; optimal partition = 1  #>  CNA calling: 2 clusters ; 47 consensus segments including 1 CNA segments  #>  genome: hg38   # Overview of the muscomic objects within show(slot(muscadet_obj, \"omics\")) #> $ATAC #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  log.ratio coverage data matrix  #>  112 cells  #>  133 features: windows of peaks  #>  691 variant positions  #>  #> $RNA #> A muscomic object of type RNA labelled scRNA-seq containing:  #>  log.ratio coverage data matrix  #>  119 cells  #>  349 features: genes  #>  373 variant positions  #>   # Overview of the first muscomic objects within show(slot(muscadet_obj, \"omics\")[[1]]) #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  log.ratio coverage data matrix  #>  112 cells  #>  133 features: windows of peaks  #>  691 variant positions"},{"path":"https://icagen.github.io/muscadet/reference/show-muscomic-method.html","id":null,"dir":"Reference","previous_headings":"","what":"muscomic object overview — show,muscomic-method","title":"muscomic object overview — show,muscomic-method","text":"Overview muscomic object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/show-muscomic-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"muscomic object overview — show,muscomic-method","text":"","code":"# S4 method for class 'muscomic' show(object)"},{"path":"https://icagen.github.io/muscadet/reference/show-muscomic-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"muscomic object overview — show,muscomic-method","text":"object muscomic object.","code":""},{"path":"https://icagen.github.io/muscadet/reference/show-muscomic-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"muscomic object overview — show,muscomic-method","text":"Prints summary stdout invisibly returns NULL","code":""},{"path":[]},{"path":"https://icagen.github.io/muscadet/reference/show-muscomic-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"muscomic object overview — show,muscomic-method","text":"","code":"atac <- CreateMuscomicObject(   type = \"ATAC\",   mat_counts = mat_counts_atac_tumor,   allele_counts = allele_counts_atac_tumor,   features = peaks ) atac #> A muscomic object of type ATAC labelled scATAC-seq containing:  #>  mat.counts coverage data matrix  #>  112 cells  #>  1000 features: peaks  #>  691 variant positions"},{"path":"https://icagen.github.io/muscadet/reference/weightedSNF.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Similarity Network Fusion — weightedSNF","title":"Weighted Similarity Network Fusion — weightedSNF","text":"Similarity Network Fusion (SNF) takes multiple views network fuses together construct unified similarity matrix. affinity matrix can assigned weight control relative contribution final fused matrix. approach enables combining information multiple data types networks, preserving complementary structures across views.","code":""},{"path":"https://icagen.github.io/muscadet/reference/weightedSNF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Similarity Network Fusion — weightedSNF","text":"","code":"weightedSNF(Wall, K = 20, t = 20, weights = rep.int(1, length(Wall)))"},{"path":"https://icagen.github.io/muscadet/reference/weightedSNF.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Weighted Similarity Network Fusion — weightedSNF","text":"function derived SNFtool::SNF() function, addition weights argument. Wang B, Mezlini , Demir F, Fiume M, Tu Z, Brudno M, Haibe-Kains B, Goldenberg (2021). SNFtool: Similarity Network Fusion. R package version 2.3.1, https://CRAN.R-project.org/package=SNFtool.","code":""},{"path":"https://icagen.github.io/muscadet/reference/weightedSNF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Similarity Network Fusion — weightedSNF","text":"Wall List affinity matrices (list). element list square, symmetric matrix shows affinities data points certain view. one matrix provided, function returns unique input matrix. K Number neighbors K-nearest neighbors (integer). Default 20. t Number iterations diffusion process (integer). Default 20. weights Numeric vector non-negative values length equal length(Wall), specifying relative weights affinity matrix fusion process (internally normalized sum 1) (numeric vector). Matrices weight 0 excluded fusion. one matrix non-zero weight, function returns matrix unchanged. Defaults equal weights matrices.","code":""},{"path":"https://icagen.github.io/muscadet/reference/weightedSNF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Similarity Network Fusion — weightedSNF","text":"overall status matrix derived, unified similarity graph data types. contains complementary information common structures individual network. one matrix provided (Wall), function returns unique input matrix.","code":""},{"path":"https://icagen.github.io/muscadet/reference/weightedSNF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weighted Similarity Network Fusion — weightedSNF","text":"Wang B, Mezlini , Demir F, Fiume M, Tu Z, Brudno M, Haibe-Kains B, Goldenberg . Similarity network fusion aggregating data types genomic scale. Nat Methods. 2014 Mar;11(3):333-7. doi: 10.1038/nmeth.2810. Concise description SNF can found : http://compbio.cs.toronto.edu/SNF/SNF/Software.html","code":""},{"path":"https://icagen.github.io/muscadet/reference/weightedSNF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Similarity Network Fusion — weightedSNF","text":"","code":"set.seed(123) # For reproducibility  # Number of samples n <- 20  # Generate the first affinity matrix: block diagonal structure block1 <- matrix(rnorm(n * n / 4, mean = 1, sd = 0.1), n / 2, n / 2) block2 <- matrix(rnorm(n * n / 4, mean = 1, sd = 0.1), n / 2, n / 2) A1 <- rbind(cbind(block1, matrix(0, n / 2, n / 2)), cbind(matrix(0, n / 2, n / 2), block2)) A1 <- A1 + diag(n) # Add self-similarity (diagonal dominance)  # Generate the second affinity matrix: random similarity matrix A2 <- matrix(runif(n * n, min = 0, max = 1), n, n) A2 <- (A2 + t(A2)) / 2 # Make it symmetric A2 <- A2 + diag(n) # Add self-similarity (diagonal dominance)  # Normalize rows to sum to 1 (transition matrices) A1 <- A1 / rowSums(A1) A2 <- A2 / rowSums(A2)  # Create a list of affinity matrices affinity_list <- list(A1, A2)  # Visualize the matrices par(mfrow = c(3, 2))  matSNF1 <- weightedSNF(affinity_list, K = 10, weights = c(1, 0)) matSNF2 <- weightedSNF(affinity_list, K = 10, weights = c(0, 1)) matSNF3 <- weightedSNF(affinity_list, K = 10, weights = c(1, 1)) matSNF4 <- weightedSNF(affinity_list, K = 10, weights = c(0.8, 0.2))  # Set common breaks to get the same color scale for all breaks <- quantile(c(A1, A2, matSNF1, matSNF2, matSNF3, matSNF4), seq(0, 1, 0.1))  image(A1, main = \"Matrix 1 (Block Structure)\", col = heat.colors(10), breaks = breaks) image(A2, main = \"Matrix 2 (Random)\", col = heat.colors(10), breaks = breaks)  image(matSNF1, main = \"Weight only Matrix\", col = heat.colors(10), breaks = breaks) image(matSNF2, main = \"Weight only Matrix\", col = heat.colors(10), breaks = breaks)  image(matSNF3, main = \"Equal weights\", col = heat.colors(10), breaks = breaks) image(matSNF4, main = \"Respectively 0.8 and 0.2 weights\", col = heat.colors(10), breaks = breaks)"}]
