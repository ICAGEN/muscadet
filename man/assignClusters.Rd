% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{assignClusters}
\alias{assignClusters}
\title{Assign a cluster assignment to a \code{muscadet} object}
\usage{
assignClusters(x, k = NULL, clusters = NULL, mapping = NULL)
}
\arguments{
\item{x}{A \code{\link{muscadet}} object (\code{muscadet}).}

\item{k}{Integer specifying the number of clusters to choose from the
muscadet object (\code{integer}). If \code{k} is provided, the clustering result
stored in the object for that specific \code{k} is used
(\code{muscadet_obj$clustering$clusters[[as.character(k)]]}).}

\item{clusters}{A custom named vector of cluster assignments (e.g., to
regroup some clusters) (\code{vector}). The vector must have the same length as
the number of cells in the muscadet object and names matching the cell
names.}

\item{mapping}{Optional named vector specifying how to remap cluster values
(\code{vector}). The names of the vector correspond to the original cluster
values, and the values are the remapped cluster values. For example, \code{c("1" = 1, "2" = 1, "3" = 2, "4" = 3)} would merge clusters 1 and 2 into 1,
cluster 3 into 2, and cluster 4 into 3.}
}
\value{
A \code{\link{muscadet}} object updated with the user chosen cluster
assignments in \code{muscadet_obj$cnacalling$clusters}.
}
\description{
Add the user selected cluster assignments to cells in a
\code{\link{muscadet}} object. This function allows the user to choose the
cluster assignments they consider to fit the data and their requirements, or
cluster assignments based on other data and methods.
}
\details{
\itemize{
\item The clusters can be taken directly from the \code{muscadet} object clustering
results with setting the \code{k} argument to the chosen partition (e.g.
\code{muscadet_obj$clustering$clusters[["2"]]} for k=\code{2}).
\item A custom vector of cluster assignments
can be attributed using the \code{clusters} argument.
\item Either way, the clusters assignments can be rearranged using the \code{mapping}
argument.
}
}
\examples{
# Load muscadet object
data(muscadet_obj)

# Select clustering result for k = 3
muscadet_obj <- assignClusters(muscadet_obj, k = 3)
table(muscadet_obj$cnacalling$clusters)

# Assign custom clusters
cell_names <- Reduce(union, SeuratObject::Cells(muscadet_obj))
n1 <- sample(1:length(cell_names), 1)
n2 <- length(cell_names) - n1
custom_clusters <- c(rep.int(1, n1), rep.int(2, n2))
names(custom_clusters) <- cell_names
muscadet_obj <- assignClusters(muscadet_obj, clusters = custom_clusters)
table(muscadet_obj$cnacalling$clusters)

# Assign clusters with remapping
# example to remap from k=4 to k=3 by merging clusters 1 and 2
clusters <- muscadet_obj$clustering$clusters[["4"]]
mapping <- c("1" = 1, "2" = 1, "3" = 2, "4" = 3)

muscadet_obj <- assignClusters(muscadet_obj, clusters = clusters, mapping = mapping)
table(muscadet_obj$cnacalling$clusters)
# check original and remapped clusters
table(clusters, muscadet_obj$cnacalling$clusters)

muscadet_obj <- assignClusters(muscadet_obj, k=4, mapping = mapping)
table(muscadet_obj$cnacalling$clusters)
# check original and remapped clusters
table(clusters, muscadet_obj$cnacalling$clusters)

# Visualize clusters on heatmap
ht <- heatmapMuscadet(
  muscadet_obj,
  k = 3,
  filename = file.path("heatmap_muscadet_k3.png"),
  title = "Example sample | k=3"
)
ht <- heatmapMuscadet(
  muscadet_obj,
  clusters = muscadet_obj$cnacalling$clusters,
  filename = file.path("heatmap_muscadet_customk3.png"),
  title = "Example sample | rearranged clusters k=3"
)

}
